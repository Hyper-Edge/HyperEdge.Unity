// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace HyperEdge.Sdk.Shared.MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(18)
            {
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>), 0 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.CheckHealthRequest), 1 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.CheckHealthResponse), 2 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.GetChallengeResponse), 3 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequest), 4 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequest), 5 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo), 6 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO), 7 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequest), 8 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponse), 9 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequest), 10 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponse), 11 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequest), 12 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequest), 13 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponse), 14 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequest), 15 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponse), 16 },
                { typeof(global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponse), 17 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>();
                case 1: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.CheckHealthRequestFormatter();
                case 2: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.CheckHealthResponseFormatter();
                case 3: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.GetChallengeResponseFormatter();
                case 4: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequestFormatter();
                case 5: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequestFormatter();
                case 6: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfoFormatter();
                case 7: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTOFormatter();
                case 8: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequestFormatter();
                case 9: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponseFormatter();
                case 10: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequestFormatter();
                case 11: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponseFormatter();
                case 12: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequestFormatter();
                case 13: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequestFormatter();
                case 14: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponseFormatter();
                case 15: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequestFormatter();
                case 16: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponseFormatter();
                case 17: return new HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponseFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol
{
    public sealed class CheckHealthRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.CheckHealthRequest>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.CheckHealthRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.CheckHealthRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.CheckHealthRequest();
            return ____result;
        }
    }

    public sealed class CheckHealthResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.CheckHealthResponse>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Healthy
        private static global::System.ReadOnlySpan<byte> GetSpan_Healthy() => new byte[1 + 7] { 167, 72, 101, 97, 108, 116, 104, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.CheckHealthResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Healthy());
            writer.Write(value.Healthy);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.CheckHealthResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.CheckHealthResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 34173321425806664UL) { goto FAIL; }

                        ____result.Healthy = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.GetChallengeResponse>
    {
        // Challenge
        private static global::System.ReadOnlySpan<byte> GetSpan_Challenge() => new byte[1 + 9] { 169, 67, 104, 97, 108, 108, 101, 110, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.GetChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Challenge());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Challenge, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.GetChallengeResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.GetChallengeResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Challenge().Slice(1))) { goto FAIL; }

                        ____result.Challenge = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetLoginChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequest>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.UserId, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.GetLoginChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetRegisterAccountChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequest>
    {
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.GetRegisterAccountChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequest>
    {
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // Signature
        private static global::System.ReadOnlySpan<byte> GetSpan_Signature() => new byte[1 + 9] { 169, 83, 105, 103, 110, 97, 116, 117, 114, 101 };
        // DeviceUId
        private static global::System.ReadOnlySpan<byte> GetSpan_DeviceUId() => new byte[1 + 9] { 169, 68, 101, 118, 105, 99, 101, 85, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_Signature());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Signature, options);
            writer.WriteRaw(GetSpan_DeviceUId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceUId, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465624460613UL) { goto FAIL; }

                        ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8247626254411852115UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                ____result.Signature = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5284241215434679620UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.DeviceUId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponse>
    {
        // Account
        private static global::System.ReadOnlySpan<byte> GetSpan_Account() => new byte[1 + 7] { 167, 65, 99, 99, 111, 117, 110, 116 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Account());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO>(formatterResolver).Serialize(ref writer, value.Account, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.UserId, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.RegisterAccountResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 32772547957449537UL:
                                ____result.Account = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // PasswordHash
        private static global::System.ReadOnlySpan<byte> GetSpan_PasswordHash() => new byte[1 + 12] { 172, 80, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104 };
        // Phone
        private static global::System.ReadOnlySpan<byte> GetSpan_Phone() => new byte[1 + 5] { 165, 80, 104, 111, 110, 101 };
        // Address
        private static global::System.ReadOnlySpan<byte> GetSpan_Address() => new byte[1 + 7] { 167, 65, 100, 100, 114, 101, 115, 115 };
        // EKS
        private static global::System.ReadOnlySpan<byte> GetSpan_EKS() => new byte[1 + 3] { 163, 69, 75, 83 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_PasswordHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(GetSpan_Phone());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(GetSpan_Address());
            writer.Write(value.Address);
            writer.WriteRaw(GetSpan_EKS());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EKS, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 465624460613UL:
                                ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 435644491856UL:
                                ____result.Phone = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PasswordHash().Slice(1))) { goto FAIL; }

                        ____result.PasswordHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501869798465UL) { goto FAIL; }

                        ____result.Address = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 5458757UL) { goto FAIL; }

                        ____result.EKS = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponse>
    {
        // Account
        private static global::System.ReadOnlySpan<byte> GetSpan_Account() => new byte[1 + 7] { 167, 65, 99, 99, 111, 117, 110, 116 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Account());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO>(formatterResolver).Serialize(ref writer, value.Account, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.UpdateAccountResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 32772547957449537UL:
                                ____result.Account = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateAppleReceiptRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequest>
    {
        // ReceiptData
        private static global::System.ReadOnlySpan<byte> GetSpan_ReceiptData() => new byte[1 + 11] { 171, 82, 101, 99, 101, 105, 112, 116, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_ReceiptData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ReceiptData, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateAppleReceiptRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ReceiptData().Slice(1))) { goto FAIL; }

                        ____result.ReceiptData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequest>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // Signature
        private static global::System.ReadOnlySpan<byte> GetSpan_Signature() => new byte[1 + 9] { 169, 83, 105, 103, 110, 97, 116, 117, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_Signature());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Signature, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Signature().Slice(1))) { goto FAIL; }

                        ____result.Signature = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateGoogleReceiptRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequest>
    {
        // ProductId
        private static global::System.ReadOnlySpan<byte> GetSpan_ProductId() => new byte[1 + 9] { 169, 80, 114, 111, 100, 117, 99, 116, 73, 100 };
        // PurchaseToken
        private static global::System.ReadOnlySpan<byte> GetSpan_PurchaseToken() => new byte[1 + 13] { 173, 80, 117, 114, 99, 104, 97, 115, 101, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_ProductId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ProductId, options);
            writer.WriteRaw(GetSpan_PurchaseToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PurchaseToken, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateGoogleReceiptRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProductId().Slice(1))) { goto FAIL; }

                        ____result.ProductId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PurchaseToken().Slice(1))) { goto FAIL; }

                        ____result.PurchaseToken = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateReceiptResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponse>
    {
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };
        // ReceiptInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_ReceiptInfo() => new byte[1 + 11] { 171, 82, 101, 99, 101, 105, 112, 116, 73, 110, 102, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
            writer.WriteRaw(GetSpan_ReceiptInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>(formatterResolver).Serialize(ref writer, value.ReceiptInfo, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501618079059UL) { goto FAIL; }

                        ____result.Success = reader.ReadBoolean();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ReceiptInfo().Slice(1))) { goto FAIL; }

                        ____result.ReceiptInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateReceiptsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponse>
    {
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };
        // Receipts
        private static global::System.ReadOnlySpan<byte> GetSpan_Receipts() => new byte[1 + 8] { 168, 82, 101, 99, 101, 105, 112, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
            writer.WriteRaw(GetSpan_Receipts());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>>(formatterResolver).Serialize(ref writer, value.Receipts, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateReceiptsResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501618079059UL) { goto FAIL; }

                        ____result.Success = reader.ReadBoolean();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8319398009635038546UL) { goto FAIL; }

                        ____result.Receipts = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol.Models
{
    public sealed class HyperEdgeReceiptInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo>
    {
        // ReceiptId
        private static global::System.ReadOnlySpan<byte> GetSpan_ReceiptId() => new byte[1 + 9] { 169, 82, 101, 99, 101, 105, 112, 116, 73, 100 };
        // ProductId
        private static global::System.ReadOnlySpan<byte> GetSpan_ProductId() => new byte[1 + 9] { 169, 80, 114, 111, 100, 117, 99, 116, 73, 100 };
        // TxId
        private static global::System.ReadOnlySpan<byte> GetSpan_TxId() => new byte[1 + 4] { 164, 84, 120, 73, 100 };
        // ProviderType
        private static global::System.ReadOnlySpan<byte> GetSpan_ProviderType() => new byte[1 + 12] { 172, 80, 114, 111, 118, 105, 100, 101, 114, 84, 121, 112, 101 };
        // ProviderResponse
        private static global::System.ReadOnlySpan<byte> GetSpan_ProviderResponse() => new byte[1 + 16] { 176, 80, 114, 111, 118, 105, 100, 101, 114, 82, 101, 115, 112, 111, 110, 115, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_ReceiptId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ReceiptId, options);
            writer.WriteRaw(GetSpan_ProductId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ProductId, options);
            writer.WriteRaw(GetSpan_TxId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TxId, options);
            writer.WriteRaw(GetSpan_ProviderType());
            writer.Write(value.ProviderType);
            writer.WriteRaw(GetSpan_ProviderResponse());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ProviderResponse, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.Models.HyperEdgeReceiptInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5292979060042065234UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.ReceiptId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5292964817914524240UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.ProductId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1682536532UL) { goto FAIL; }

                        ____result.TxId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProviderType().Slice(1))) { goto FAIL; }

                        ____result.ProviderType = reader.ReadInt32();
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProviderResponse().Slice(1))) { goto FAIL; }

                        ____result.ProviderResponse = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerAccountDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // DeviceUId
        private static global::System.ReadOnlySpan<byte> GetSpan_DeviceUId() => new byte[1 + 9] { 169, 68, 101, 118, 105, 99, 101, 85, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // PasswordHash
        private static global::System.ReadOnlySpan<byte> GetSpan_PasswordHash() => new byte[1 + 12] { 172, 80, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104 };
        // Phone
        private static global::System.ReadOnlySpan<byte> GetSpan_Phone() => new byte[1 + 5] { 165, 80, 104, 111, 110, 101 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // EKSHash
        private static global::System.ReadOnlySpan<byte> GetSpan_EKSHash() => new byte[1 + 7] { 167, 69, 75, 83, 72, 97, 115, 104 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_DeviceUId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceUId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_PasswordHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(GetSpan_Phone());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_EKSHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EKSHash, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.Models.PlayerAccountDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5284241215434679620UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.DeviceUId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 465624460613UL:
                                ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 435644491856UL:
                                ____result.Phone = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PasswordHash().Slice(1))) { goto FAIL; }

                        ____result.PasswordHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29400259240348485UL) { goto FAIL; }

                        ____result.EKSHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace HyperEdge.Sdk.Shared.MessagePack.Formatters.HyperEdge.Sdk.Shared.Protocol
{
    public sealed class ValidateChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Token, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Serialize(ref writer, value.Expiration, options);
            writer.Write(value.Success);
        }

        public global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Token__ = default(string);
            var __Expiration__ = default(global::System.DateTimeOffset);
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Token__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Expiration__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::HyperEdge.Sdk.Shared.Protocol.ValidateChallengeResponse(__Token__, __Expiration__);
            if (length <= 2)
            {
                goto MEMBER_ASSIGNMENT_END;
            }

            ____result.Success = __Success__;

        MEMBER_ASSIGNMENT_END:
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

