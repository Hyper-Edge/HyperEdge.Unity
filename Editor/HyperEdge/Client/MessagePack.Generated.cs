// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(232)
            {
                { typeof(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>>), 0 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>), 1 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>), 2 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>), 3 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>), 4 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>), 5 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>), 6 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>), 7 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>), 8 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>), 9 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>), 10 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>), 11 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO>), 12 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO>), 13 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO>), 14 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO>), 15 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO>), 16 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO>), 17 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO>), 18 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO>), 19 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO>), 20 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>), 21 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO>), 22 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>), 23 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>), 24 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost>), 25 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward>), 26 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost>), 27 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward>), 28 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO>), 29 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>), 30 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>), 31 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO>), 32 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO>), 33 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO>), 34 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO>), 35 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>), 36 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>), 37 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>), 38 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>), 39 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>), 40 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO>), 41 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>), 42 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.StoreDTO>), 43 },
                { typeof(global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>), 44 },
                { typeof(global::System.Collections.Generic.List<global::System.Tuple<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>), 45 },
                { typeof(global::System.Collections.Generic.List<string>), 46 },
                { typeof(global::System.Tuple<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>), 47 },
                { typeof(global::HyperEdge.Shared.Protocol.AddBattlePassRequest), 48 },
                { typeof(global::HyperEdge.Shared.Protocol.AddBattlePassResponse), 49 },
                { typeof(global::HyperEdge.Shared.Protocol.AddCraftRulesRequest), 50 },
                { typeof(global::HyperEdge.Shared.Protocol.AddCraftRulesResponse), 51 },
                { typeof(global::HyperEdge.Shared.Protocol.AddGameDataRequest), 52 },
                { typeof(global::HyperEdge.Shared.Protocol.AddGameDataResponse), 53 },
                { typeof(global::HyperEdge.Shared.Protocol.AddInventoryItemRequest), 54 },
                { typeof(global::HyperEdge.Shared.Protocol.AddInventoryItemResponse), 55 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequest), 56 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponse), 57 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc20TokensRequest), 58 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc20TokensResponse), 59 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc721TokensRequest), 60 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPackageErc721TokensResponse), 61 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequest), 62 },
                { typeof(global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponse), 63 },
                { typeof(global::HyperEdge.Shared.Protocol.AddProgressionLadderRequest), 64 },
                { typeof(global::HyperEdge.Shared.Protocol.AddProgressionLadderResponse), 65 },
                { typeof(global::HyperEdge.Shared.Protocol.AddProgressionRequest), 66 },
                { typeof(global::HyperEdge.Shared.Protocol.AddProgressionResponse), 67 },
                { typeof(global::HyperEdge.Shared.Protocol.AddQuestRequest), 68 },
                { typeof(global::HyperEdge.Shared.Protocol.AddQuestResponse), 69 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRequestHandlerRequest), 70 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRequestHandlerResponse), 71 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRewardRequest), 72 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRewardResponse), 73 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRulesRequest), 74 },
                { typeof(global::HyperEdge.Shared.Protocol.AddRulesResponse), 75 },
                { typeof(global::HyperEdge.Shared.Protocol.AddTournamentRequest), 76 },
                { typeof(global::HyperEdge.Shared.Protocol.AddTournamentResponse), 77 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.BuildAppRequest), 78 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.BuildAppResponse), 79 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequest), 80 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponse), 81 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.RunAppRequest), 82 },
                { typeof(global::HyperEdge.Shared.Protocol.Apps.RunAppResponse), 83 },
                { typeof(global::HyperEdge.Shared.Protocol.ChatMessageResponse), 84 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateApiKeyRequest), 85 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateApiKeyResponse), 86 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateDataClassContractRequest), 87 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateDataClassContractResponse), 88 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateDataClassItemRequest), 89 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateDataClassItemResponse), 90 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateEnergySystemRequest), 91 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateEnergySystemResponse), 92 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc1155TokenRequest), 93 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc1155TokenResponse), 94 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc20TokenRequest), 95 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc20TokenResponse), 96 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc721TokenRequest), 97 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateErc721TokenResponse), 98 },
                { typeof(global::HyperEdge.Shared.Protocol.CreatePackageRequest), 99 },
                { typeof(global::HyperEdge.Shared.Protocol.CreatePackageResponse), 100 },
                { typeof(global::HyperEdge.Shared.Protocol.CreatePriceRequest), 101 },
                { typeof(global::HyperEdge.Shared.Protocol.CreatePriceResponse), 102 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateStoreRequest), 103 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateStoreResponse), 104 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateWeb3AppRequest), 105 },
                { typeof(global::HyperEdge.Shared.Protocol.CreateWeb3AppResponse), 106 },
                { typeof(global::HyperEdge.Shared.Protocol.DeleteApiKeyRequest), 107 },
                { typeof(global::HyperEdge.Shared.Protocol.DeleteApiKeyResponse), 108 },
                { typeof(global::HyperEdge.Shared.Protocol.DeployContractRequest), 109 },
                { typeof(global::HyperEdge.Shared.Protocol.DeployContractResponse), 110 },
                { typeof(global::HyperEdge.Shared.Protocol.Erc721DataDTO), 111 },
                { typeof(global::HyperEdge.Shared.Protocol.ExportAppDefRequest), 112 },
                { typeof(global::HyperEdge.Shared.Protocol.ExportAppDefResponse), 113 },
                { typeof(global::HyperEdge.Shared.Protocol.GetAccountRequest), 114 },
                { typeof(global::HyperEdge.Shared.Protocol.GetAccountResponse), 115 },
                { typeof(global::HyperEdge.Shared.Protocol.GetChallengeRequest), 116 },
                { typeof(global::HyperEdge.Shared.Protocol.GetChallengeResponse), 117 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassContractRequest), 118 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassContractResponse), 119 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassContractsRequest), 120 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassContractsResponse), 121 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassItemsRequest), 122 },
                { typeof(global::HyperEdge.Shared.Protocol.GetDataClassItemsResponse), 123 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc1155TokenRequest), 124 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc1155TokenResponse), 125 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc1155TokensRequest), 126 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc1155TokensResponse), 127 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc20TokenRequest), 128 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc20TokenResponse), 129 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc20TokensRequest), 130 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc20TokensResponse), 131 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc721TokenRequest), 132 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc721TokenResponse), 133 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc721TokensRequest), 134 },
                { typeof(global::HyperEdge.Shared.Protocol.GetErc721TokensResponse), 135 },
                { typeof(global::HyperEdge.Shared.Protocol.GetInventoryItemsRequest), 136 },
                { typeof(global::HyperEdge.Shared.Protocol.GetInventoryItemsResponse), 137 },
                { typeof(global::HyperEdge.Shared.Protocol.GetPackageRequest), 138 },
                { typeof(global::HyperEdge.Shared.Protocol.GetPackageResponse), 139 },
                { typeof(global::HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequest), 140 },
                { typeof(global::HyperEdge.Shared.Protocol.GetRequestHandlersRequest), 141 },
                { typeof(global::HyperEdge.Shared.Protocol.GetRequestHandlersResponse), 142 },
                { typeof(global::HyperEdge.Shared.Protocol.GetStoreRequest), 143 },
                { typeof(global::HyperEdge.Shared.Protocol.GetStoreResponse), 144 },
                { typeof(global::HyperEdge.Shared.Protocol.GetStoresRequest), 145 },
                { typeof(global::HyperEdge.Shared.Protocol.GetStoresResponse), 146 },
                { typeof(global::HyperEdge.Shared.Protocol.GetWeb3AppRequest), 147 },
                { typeof(global::HyperEdge.Shared.Protocol.GetWeb3AppResponse), 148 },
                { typeof(global::HyperEdge.Shared.Protocol.GetWeb3AppsRequest), 149 },
                { typeof(global::HyperEdge.Shared.Protocol.GetWeb3AppsResponse), 150 },
                { typeof(global::HyperEdge.Shared.Protocol.JoinChatRoomRequest), 151 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.AccountDTO), 152 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.AppEnvDTO), 153 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO), 154 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO), 155 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO), 156 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO), 157 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO), 158 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO), 159 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO), 160 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO), 161 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO), 162 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO), 163 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO), 164 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO), 165 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO), 166 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO), 167 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO), 168 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO), 169 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO), 170 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO), 171 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO), 172 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO), 173 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO), 174 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO), 175 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO), 176 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO), 177 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO), 178 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO), 179 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO), 180 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO), 181 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO), 182 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTO), 183 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost), 184 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward), 185 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost), 186 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward), 187 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO), 188 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO), 189 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO), 190 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO), 191 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO), 192 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO), 193 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO), 194 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO), 195 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO), 196 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO), 197 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO), 198 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO), 199 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO), 200 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PackageDTO), 201 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO), 202 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO), 203 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO), 204 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PriceDTO), 205 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO), 206 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO), 207 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.StoreDTO), 208 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Web3AppDataDTO), 209 },
                { typeof(global::HyperEdge.Shared.Protocol.Models.Web3AppDTO), 210 },
                { typeof(global::HyperEdge.Shared.Protocol.RegisterAccountRequest), 211 },
                { typeof(global::HyperEdge.Shared.Protocol.RegisterAccountResponse), 212 },
                { typeof(global::HyperEdge.Shared.Protocol.ReleaseAppDefRequest), 213 },
                { typeof(global::HyperEdge.Shared.Protocol.ReleaseAppDefResponse), 214 },
                { typeof(global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO), 215 },
                { typeof(global::HyperEdge.Shared.Protocol.SetPackagePriceRequest), 216 },
                { typeof(global::HyperEdge.Shared.Protocol.SetPackagePriceResponse), 217 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateAccountRequest), 218 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateAccountResponse), 219 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateDataClassItemRequest), 220 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateDataClassItemResponse), 221 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateDataClassRequest), 222 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateDataClassResponse), 223 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateErc721TokenRequest), 224 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateErc721TokenResponse), 225 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdatePackageRequest), 226 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdatePackageResponse), 227 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateStoreRequest), 228 },
                { typeof(global::HyperEdge.Shared.Protocol.UpdateStoreResponse), 229 },
                { typeof(global::HyperEdge.Shared.Protocol.ValidateChallengeRequest), 230 },
                { typeof(global::HyperEdge.Shared.Protocol.ValidateChallengeResponse), 231 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>();
                case 10: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>();
                case 11: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO>();
                case 13: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO>();
                case 14: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO>();
                case 15: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO>();
                case 16: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO>();
                case 17: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO>();
                case 18: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO>();
                case 19: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO>();
                case 20: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO>();
                case 21: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>();
                case 22: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO>();
                case 23: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>();
                case 24: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>();
                case 25: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost>();
                case 26: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward>();
                case 27: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost>();
                case 28: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward>();
                case 29: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO>();
                case 30: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>();
                case 31: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>();
                case 32: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO>();
                case 33: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO>();
                case 34: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO>();
                case 35: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO>();
                case 36: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>();
                case 37: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>();
                case 38: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>();
                case 39: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>();
                case 40: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>();
                case 41: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO>();
                case 42: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>();
                case 43: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.StoreDTO>();
                case 44: return new global::MessagePack.Formatters.ListFormatter<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>();
                case 45: return new global::MessagePack.Formatters.ListFormatter<global::System.Tuple<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>();
                case 46: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 47: return new global::MessagePack.Formatters.TupleFormatter<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>();
                case 48: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddBattlePassRequestFormatter();
                case 49: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddBattlePassResponseFormatter();
                case 50: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddCraftRulesRequestFormatter();
                case 51: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddCraftRulesResponseFormatter();
                case 52: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddGameDataRequestFormatter();
                case 53: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddGameDataResponseFormatter();
                case 54: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddInventoryItemRequestFormatter();
                case 55: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddInventoryItemResponseFormatter();
                case 56: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequestFormatter();
                case 57: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponseFormatter();
                case 58: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc20TokensRequestFormatter();
                case 59: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc20TokensResponseFormatter();
                case 60: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc721TokensRequestFormatter();
                case 61: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPackageErc721TokensResponseFormatter();
                case 62: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequestFormatter();
                case 63: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponseFormatter();
                case 64: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddProgressionLadderRequestFormatter();
                case 65: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddProgressionLadderResponseFormatter();
                case 66: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddProgressionRequestFormatter();
                case 67: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddProgressionResponseFormatter();
                case 68: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddQuestRequestFormatter();
                case 69: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddQuestResponseFormatter();
                case 70: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRequestHandlerRequestFormatter();
                case 71: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRequestHandlerResponseFormatter();
                case 72: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRewardRequestFormatter();
                case 73: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRewardResponseFormatter();
                case 74: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRulesRequestFormatter();
                case 75: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddRulesResponseFormatter();
                case 76: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddTournamentRequestFormatter();
                case 77: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.AddTournamentResponseFormatter();
                case 78: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.BuildAppRequestFormatter();
                case 79: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.BuildAppResponseFormatter();
                case 80: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequestFormatter();
                case 81: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponseFormatter();
                case 82: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.RunAppRequestFormatter();
                case 83: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps.RunAppResponseFormatter();
                case 84: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ChatMessageResponseFormatter();
                case 85: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateApiKeyRequestFormatter();
                case 86: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateApiKeyResponseFormatter();
                case 87: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateDataClassContractRequestFormatter();
                case 88: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateDataClassContractResponseFormatter();
                case 89: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateDataClassItemRequestFormatter();
                case 90: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateDataClassItemResponseFormatter();
                case 91: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateEnergySystemRequestFormatter();
                case 92: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateEnergySystemResponseFormatter();
                case 93: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc1155TokenRequestFormatter();
                case 94: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc1155TokenResponseFormatter();
                case 95: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc20TokenRequestFormatter();
                case 96: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc20TokenResponseFormatter();
                case 97: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc721TokenRequestFormatter();
                case 98: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateErc721TokenResponseFormatter();
                case 99: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreatePackageRequestFormatter();
                case 100: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreatePackageResponseFormatter();
                case 101: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreatePriceRequestFormatter();
                case 102: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreatePriceResponseFormatter();
                case 103: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateStoreRequestFormatter();
                case 104: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateStoreResponseFormatter();
                case 105: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateWeb3AppRequestFormatter();
                case 106: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.CreateWeb3AppResponseFormatter();
                case 107: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.DeleteApiKeyRequestFormatter();
                case 108: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.DeleteApiKeyResponseFormatter();
                case 109: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.DeployContractRequestFormatter();
                case 110: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.DeployContractResponseFormatter();
                case 111: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Erc721DataDTOFormatter();
                case 112: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ExportAppDefRequestFormatter();
                case 113: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ExportAppDefResponseFormatter();
                case 114: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetAccountRequestFormatter();
                case 115: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetAccountResponseFormatter();
                case 116: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetChallengeRequestFormatter();
                case 117: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetChallengeResponseFormatter();
                case 118: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassContractRequestFormatter();
                case 119: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassContractResponseFormatter();
                case 120: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassContractsRequestFormatter();
                case 121: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassContractsResponseFormatter();
                case 122: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassItemsRequestFormatter();
                case 123: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetDataClassItemsResponseFormatter();
                case 124: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc1155TokenRequestFormatter();
                case 125: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc1155TokenResponseFormatter();
                case 126: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc1155TokensRequestFormatter();
                case 127: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc1155TokensResponseFormatter();
                case 128: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc20TokenRequestFormatter();
                case 129: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc20TokenResponseFormatter();
                case 130: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc20TokensRequestFormatter();
                case 131: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc20TokensResponseFormatter();
                case 132: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc721TokenRequestFormatter();
                case 133: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc721TokenResponseFormatter();
                case 134: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc721TokensRequestFormatter();
                case 135: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetErc721TokensResponseFormatter();
                case 136: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetInventoryItemsRequestFormatter();
                case 137: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetInventoryItemsResponseFormatter();
                case 138: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetPackageRequestFormatter();
                case 139: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetPackageResponseFormatter();
                case 140: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequestFormatter();
                case 141: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetRequestHandlersRequestFormatter();
                case 142: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetRequestHandlersResponseFormatter();
                case 143: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetStoreRequestFormatter();
                case 144: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetStoreResponseFormatter();
                case 145: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetStoresRequestFormatter();
                case 146: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetStoresResponseFormatter();
                case 147: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetWeb3AppRequestFormatter();
                case 148: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetWeb3AppResponseFormatter();
                case 149: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetWeb3AppsRequestFormatter();
                case 150: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.GetWeb3AppsResponseFormatter();
                case 151: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.JoinChatRoomRequestFormatter();
                case 152: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.AccountDTOFormatter();
                case 153: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.AppEnvDTOFormatter();
                case 154: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.ContractFieldDTOFormatter();
                case 155: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.DataClassContractDataDTOFormatter();
                case 156: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.DataClassContractDTOFormatter();
                case 157: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.DataClassItemDataDTOFormatter();
                case 158: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.DataClassItemDTOFormatter();
                case 159: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Erc1155ItemDTOFormatter();
                case 160: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Erc1155TokenDTOFormatter();
                case 161: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Erc20TokenDTOFormatter();
                case 162: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Erc721TokenDTOFormatter();
                case 163: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.AppDefDTOFormatter();
                case 164: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.DataClassDTOFormatter();
                case 165: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTOFormatter();
                case 166: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTOFormatter();
                case 167: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTOFormatter();
                case 168: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTOFormatter();
                case 169: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTOFormatter();
                case 170: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTOFormatter();
                case 171: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTOFormatter();
                case 172: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTOFormatter();
                case 173: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTOFormatter();
                case 174: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTOFormatter();
                case 175: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTOFormatter();
                case 176: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTOFormatter();
                case 177: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTOFormatter();
                case 178: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTOFormatter();
                case 179: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTOFormatter();
                case 180: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.CostDTOFormatter();
                case 181: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTOFormatter();
                case 182: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTOFormatter();
                case 183: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTOFormatter();
                case 184: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155CostFormatter();
                case 185: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155RewardFormatter();
                case 186: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.Erc721CostFormatter();
                case 187: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.Erc721RewardFormatter();
                case 188: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTOFormatter();
                case 189: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTOFormatter();
                case 190: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTOFormatter();
                case 191: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTOFormatter();
                case 192: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTOFormatter();
                case 193: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTOFormatter();
                case 194: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTOFormatter();
                case 195: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTOFormatter();
                case 196: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTOFormatter();
                case 197: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTOFormatter();
                case 198: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTOFormatter();
                case 199: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTOFormatter();
                case 200: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTOFormatter();
                case 201: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PackageDTOFormatter();
                case 202: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTOFormatter();
                case 203: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTOFormatter();
                case 204: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTOFormatter();
                case 205: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PriceDTOFormatter();
                case 206: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTOFormatter();
                case 207: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.RequestHandlerDTOFormatter();
                case 208: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.StoreDTOFormatter();
                case 209: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Web3AppDataDTOFormatter();
                case 210: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Web3AppDTOFormatter();
                case 211: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.RegisterAccountRequestFormatter();
                case 212: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.RegisterAccountResponseFormatter();
                case 213: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ReleaseAppDefRequestFormatter();
                case 214: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ReleaseAppDefResponseFormatter();
                case 215: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.RuleWorkflowsDTOFormatter();
                case 216: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.SetPackagePriceRequestFormatter();
                case 217: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.SetPackagePriceResponseFormatter();
                case 218: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateAccountRequestFormatter();
                case 219: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateAccountResponseFormatter();
                case 220: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateDataClassItemRequestFormatter();
                case 221: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateDataClassItemResponseFormatter();
                case 222: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateDataClassRequestFormatter();
                case 223: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateDataClassResponseFormatter();
                case 224: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateErc721TokenRequestFormatter();
                case 225: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateErc721TokenResponseFormatter();
                case 226: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdatePackageRequestFormatter();
                case 227: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdatePackageResponseFormatter();
                case 228: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateStoreRequestFormatter();
                case 229: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.UpdateStoreResponseFormatter();
                case 230: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ValidateChallengeRequestFormatter();
                case 231: return new MessagePack.Formatters.HyperEdge.Shared.Protocol.ValidateChallengeResponseFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol
{
    public sealed class AddBattlePassRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddBattlePassRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // BattlePass
        private static global::System.ReadOnlySpan<byte> GetSpan_BattlePass() => new byte[1 + 10] { 170, 66, 97, 116, 116, 108, 101, 80, 97, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddBattlePassRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_BattlePass());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>(formatterResolver).Serialize(ref writer, value.BattlePass, options);
        }

        public global::HyperEdge.Shared.Protocol.AddBattlePassRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddBattlePassRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattlePass().Slice(1))) { goto FAIL; }

                        ____result.BattlePass = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddBattlePassResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddBattlePassResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddBattlePassResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddBattlePassResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddBattlePassResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddCraftRulesRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddCraftRulesRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // CraftRules
        private static global::System.ReadOnlySpan<byte> GetSpan_CraftRules() => new byte[1 + 10] { 170, 67, 114, 97, 102, 116, 82, 117, 108, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddCraftRulesRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_CraftRules());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>(formatterResolver).Serialize(ref writer, value.CraftRules, options);
        }

        public global::HyperEdge.Shared.Protocol.AddCraftRulesRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddCraftRulesRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CraftRules().Slice(1))) { goto FAIL; }

                        ____result.CraftRules = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddCraftRulesResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddCraftRulesResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddCraftRulesResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddCraftRulesResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddCraftRulesResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddGameDataRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddGameDataRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddGameDataRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.AddGameDataRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddGameDataRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddGameDataResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddGameDataResponse>
    {
        // DataClassItem
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassItem() => new byte[1 + 13] { 173, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddGameDataResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassItem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Serialize(ref writer, value.DataClassItem, options);
        }

        public global::HyperEdge.Shared.Protocol.AddGameDataResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddGameDataResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassItem().Slice(1))) { goto FAIL; }

                        ____result.DataClassItem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddInventoryItemRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddInventoryItemRequest>
    {
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // DataClassItem
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassItem() => new byte[1 + 13] { 173, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddInventoryItemRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_DataClassItem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.DataClassItem, options);
        }

        public global::HyperEdge.Shared.Protocol.AddInventoryItemRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddInventoryItemRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassItem().Slice(1))) { goto FAIL; }

                        ____result.DataClassItem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddInventoryItemResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddInventoryItemResponse>
    {
        // Item
        private static global::System.ReadOnlySpan<byte> GetSpan_Item() => new byte[1 + 4] { 164, 73, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddInventoryItemResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Item());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>(formatterResolver).Serialize(ref writer, value.Item, options);
        }

        public global::HyperEdge.Shared.Protocol.AddInventoryItemResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddInventoryItemResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1835365449UL) { goto FAIL; }

                        ____result.Item = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc1155TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc1155TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponse>
    {
        // PackageTokens
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageTokens() => new byte[1 + 13] { 173, 80, 97, 99, 107, 97, 103, 101, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_PackageTokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO>(formatterResolver).Serialize(ref writer, value.PackageTokens, options);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc1155TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageTokens().Slice(1))) { goto FAIL; }

                        ____result.PackageTokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc20TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc20TokensRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc20TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc20TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc20TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017765461313UL) { goto FAIL; }

                        ____result.Amount = reader.ReadUInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc20TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc20TokensResponse>
    {
        // PackageTokens
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageTokens() => new byte[1 + 13] { 173, 80, 97, 99, 107, 97, 103, 101, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc20TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_PackageTokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO>(formatterResolver).Serialize(ref writer, value.PackageTokens, options);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc20TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc20TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageTokens().Slice(1))) { goto FAIL; }

                        ____result.PackageTokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc721TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc721TokensRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc721TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc721TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc721TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869908UL) { goto FAIL; }

                        ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017765461313UL) { goto FAIL; }

                        ____result.Amount = reader.ReadUInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPackageErc721TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPackageErc721TokensResponse>
    {
        // PackageTokens
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageTokens() => new byte[1 + 13] { 173, 80, 97, 99, 107, 97, 103, 101, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPackageErc721TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_PackageTokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO>(formatterResolver).Serialize(ref writer, value.PackageTokens, options);
        }

        public global::HyperEdge.Shared.Protocol.AddPackageErc721TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPackageErc721TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageTokens().Slice(1))) { goto FAIL; }

                        ____result.PackageTokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPriceErc1155TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequest>
    {
        // PriceId
        private static global::System.ReadOnlySpan<byte> GetSpan_PriceId() => new byte[1 + 7] { 167, 80, 114, 105, 99, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_PriceId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PriceId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28228197479445072UL:
                                ____result.PriceId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 28228236167835476UL:
                                ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddPriceErc1155TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponse>
    {
        // PriceTokens
        private static global::System.ReadOnlySpan<byte> GetSpan_PriceTokens() => new byte[1 + 11] { 171, 80, 114, 105, 99, 101, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_PriceTokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO>(formatterResolver).Serialize(ref writer, value.PriceTokens, options);
        }

        public global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddPriceErc1155TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PriceTokens().Slice(1))) { goto FAIL; }

                        ____result.PriceTokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddProgressionLadderRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddProgressionLadderRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // LadderType
        private static global::System.ReadOnlySpan<byte> GetSpan_LadderType() => new byte[1 + 10] { 170, 76, 97, 100, 100, 101, 114, 84, 121, 112, 101 };
        // Ladder
        private static global::System.ReadOnlySpan<byte> GetSpan_Ladder() => new byte[1 + 6] { 166, 76, 97, 100, 100, 101, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddProgressionLadderRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_LadderType());
            writer.Write(value.LadderType);
            writer.WriteRaw(GetSpan_Ladder());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>(formatterResolver).Serialize(ref writer, value.Ladder, options);
        }

        public global::HyperEdge.Shared.Protocol.AddProgressionLadderRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddProgressionLadderRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LadderType().Slice(1))) { goto FAIL; }

                        ____result.LadderType = reader.ReadInt32();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 125779801563468UL) { goto FAIL; }

                        ____result.Ladder = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddProgressionLadderResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddProgressionLadderResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddProgressionLadderResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddProgressionLadderResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddProgressionLadderResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddProgressionRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddProgressionRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // ProgressionSystem
        private static global::System.ReadOnlySpan<byte> GetSpan_ProgressionSystem() => new byte[1 + 17] { 177, 80, 114, 111, 103, 114, 101, 115, 115, 105, 111, 110, 83, 121, 115, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddProgressionRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_ProgressionSystem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>(formatterResolver).Serialize(ref writer, value.ProgressionSystem, options);
        }

        public global::HyperEdge.Shared.Protocol.AddProgressionRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddProgressionRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProgressionSystem().Slice(1))) { goto FAIL; }

                        ____result.ProgressionSystem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddProgressionResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddProgressionResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddProgressionResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddProgressionResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddProgressionResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddQuestRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddQuestRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Quest
        private static global::System.ReadOnlySpan<byte> GetSpan_Quest() => new byte[1 + 5] { 165, 81, 117, 101, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddQuestRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Quest());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>(formatterResolver).Serialize(ref writer, value.Quest, options);
        }

        public global::HyperEdge.Shared.Protocol.AddQuestRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddQuestRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 430728835137UL:
                                ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 500152235345UL:
                                ____result.Quest = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddQuestResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddQuestResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddQuestResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddQuestResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddQuestResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRequestHandlerRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRequestHandlerRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RequestClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestClassId() => new byte[1 + 14] { 174, 82, 101, 113, 117, 101, 115, 116, 67, 108, 97, 115, 115, 73, 100 };
        // ResponseClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_ResponseClassId() => new byte[1 + 15] { 175, 82, 101, 115, 112, 111, 110, 115, 101, 67, 108, 97, 115, 115, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRequestHandlerRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RequestClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.RequestClassId, options);
            writer.WriteRaw(GetSpan_ResponseClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ResponseClassId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRequestHandlerRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRequestHandlerRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RequestClassId().Slice(1))) { goto FAIL; }

                        ____result.RequestClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ResponseClassId().Slice(1))) { goto FAIL; }

                        ____result.ResponseClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRequestHandlerResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRequestHandlerResponse>
    {
        // Handler
        private static global::System.ReadOnlySpan<byte> GetSpan_Handler() => new byte[1 + 7] { 167, 72, 97, 110, 100, 108, 101, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRequestHandlerResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Handler());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>(formatterResolver).Serialize(ref writer, value.Handler, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRequestHandlerResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRequestHandlerResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32199663560843592UL) { goto FAIL; }

                        ____result.Handler = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRewardRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRewardRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Reward
        private static global::System.ReadOnlySpan<byte> GetSpan_Reward() => new byte[1 + 6] { 166, 82, 101, 119, 97, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRewardRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Reward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Serialize(ref writer, value.Reward, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRewardRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRewardRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110442424264018UL) { goto FAIL; }

                        ____result.Reward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRewardResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRewardResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };
        // Reward
        private static global::System.ReadOnlySpan<byte> GetSpan_Reward() => new byte[1 + 6] { 166, 82, 101, 119, 97, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRewardResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
            writer.WriteRaw(GetSpan_Reward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Serialize(ref writer, value.Reward, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRewardResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRewardResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110442424264018UL) { goto FAIL; }

                        ____result.Reward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRulesRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRulesRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Workflows
        private static global::System.ReadOnlySpan<byte> GetSpan_Workflows() => new byte[1 + 9] { 169, 87, 111, 114, 107, 102, 108, 111, 119, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRulesRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Workflows());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO>(formatterResolver).Serialize(ref writer, value.Workflows, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRulesRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRulesRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Workflows().Slice(1))) { goto FAIL; }

                        ____result.Workflows = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddRulesResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddRulesResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Workflows
        private static global::System.ReadOnlySpan<byte> GetSpan_Workflows() => new byte[1 + 9] { 169, 87, 111, 114, 107, 102, 108, 111, 119, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddRulesResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Workflows());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO>(formatterResolver).Serialize(ref writer, value.Workflows, options);
        }

        public global::HyperEdge.Shared.Protocol.AddRulesResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddRulesResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Workflows().Slice(1))) { goto FAIL; }

                        ____result.Workflows = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddTournamentRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddTournamentRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Tournament
        private static global::System.ReadOnlySpan<byte> GetSpan_Tournament() => new byte[1 + 10] { 170, 84, 111, 117, 114, 110, 97, 109, 101, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddTournamentRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Tournament());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>(formatterResolver).Serialize(ref writer, value.Tournament, options);
        }

        public global::HyperEdge.Shared.Protocol.AddTournamentRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddTournamentRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Tournament().Slice(1))) { goto FAIL; }

                        ____result.Tournament = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AddTournamentResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.AddTournamentResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.AddTournamentResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.AddTournamentResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.AddTournamentResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateApiKeyRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateApiKeyRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateApiKeyRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateApiKeyRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateApiKeyRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateApiKeyResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateApiKeyResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ApiKey
        private static global::System.ReadOnlySpan<byte> GetSpan_ApiKey() => new byte[1 + 6] { 166, 65, 112, 105, 75, 101, 121 };
        // ExpiresAt
        private static global::System.ReadOnlySpan<byte> GetSpan_ExpiresAt() => new byte[1 + 9] { 169, 69, 120, 112, 105, 114, 101, 115, 65, 116 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateApiKeyResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_ApiKey());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ApiKey, options);
            writer.WriteRaw(GetSpan_ExpiresAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.ExpiresAt, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateApiKeyResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateApiKeyResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 133475963859009UL) { goto FAIL; }

                        ____result.ApiKey = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4716224776856696901UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.ExpiresAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateDataClassContractRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateDataClassContractRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateDataClassContractRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Type());
            writer.Write(value.Type);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateDataClassContractRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateDataClassContractRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                ____result.Type = reader.ReadInt32();
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateDataClassContractResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateDataClassContractResponse>
    {
        // DataClassContract
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContract() => new byte[1 + 17] { 177, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateDataClassContractResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassContract());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Serialize(ref writer, value.DataClassContract, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateDataClassContractResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateDataClassContractResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContract().Slice(1))) { goto FAIL; }

                        ____result.DataClassContract = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateDataClassItemRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateDataClassItemRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // DataClassContract
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContract() => new byte[1 + 17] { 177, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateDataClassItemRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_DataClassContract());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.DataClassContract, options);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateDataClassItemRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateDataClassItemRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContract().Slice(1))) { goto FAIL; }

                        ____result.DataClassContract = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateDataClassItemResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateDataClassItemResponse>
    {
        // DataClassItem
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassItem() => new byte[1 + 13] { 173, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateDataClassItemResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassItem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Serialize(ref writer, value.DataClassItem, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateDataClassItemResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateDataClassItemResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassItem().Slice(1))) { goto FAIL; }

                        ____result.DataClassItem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateEnergySystemRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateEnergySystemRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateEnergySystemRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.Model, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateEnergySystemRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateEnergySystemRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 430728835137UL:
                                ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 465557548877UL:
                                ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateEnergySystemResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateEnergySystemResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // EnergySystem
        private static global::System.ReadOnlySpan<byte> GetSpan_EnergySystem() => new byte[1 + 12] { 172, 69, 110, 101, 114, 103, 121, 83, 121, 115, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateEnergySystemResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_EnergySystem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>(formatterResolver).Serialize(ref writer, value.EnergySystem, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateEnergySystemResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateEnergySystemResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EnergySystem().Slice(1))) { goto FAIL; }

                        ____result.EnergySystem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc1155TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc1155TokenRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc1155TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc1155TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc1155TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc1155TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc1155TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc1155TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc1155TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc1155TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc20TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc20TokenRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Symbol
        private static global::System.ReadOnlySpan<byte> GetSpan_Symbol() => new byte[1 + 6] { 166, 83, 121, 109, 98, 111, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc20TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Symbol());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Symbol, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc20TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc20TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 119225648511315UL) { goto FAIL; }

                        ____result.Symbol = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc20TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc20TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc20TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc20TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc20TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc721TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc721TokenRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc721TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Erc721DataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc721TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc721TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Erc721DataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateErc721TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateErc721TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateErc721TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateErc721TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateErc721TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatePackageRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreatePackageRequest>
    {
        // StoreId
        private static global::System.ReadOnlySpan<byte> GetSpan_StoreId() => new byte[1 + 7] { 167, 83, 116, 111, 114, 101, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreatePackageRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_StoreId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.StoreId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreatePackageRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreatePackageRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197731497043UL) { goto FAIL; }

                        ____result.StoreId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatePackageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreatePackageResponse>
    {
        // Package
        private static global::System.ReadOnlySpan<byte> GetSpan_Package() => new byte[1 + 7] { 167, 80, 97, 99, 107, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreatePackageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Package());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Serialize(ref writer, value.Package, options);
        }

        public global::HyperEdge.Shared.Protocol.CreatePackageResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreatePackageResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640758939984UL) { goto FAIL; }

                        ____result.Package = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatePriceRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreatePriceRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreatePriceRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::HyperEdge.Shared.Protocol.CreatePriceRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreatePriceRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatePriceResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreatePriceResponse>
    {
        // Price
        private static global::System.ReadOnlySpan<byte> GetSpan_Price() => new byte[1 + 5] { 165, 80, 114, 105, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreatePriceResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Price());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PriceDTO>(formatterResolver).Serialize(ref writer, value.Price, options);
        }

        public global::HyperEdge.Shared.Protocol.CreatePriceResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreatePriceResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435459551824UL) { goto FAIL; }

                        ____result.Price = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PriceDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateStoreRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateStoreRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateStoreRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateStoreRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateStoreRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateStoreResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateStoreResponse>
    {
        // Store
        private static global::System.ReadOnlySpan<byte> GetSpan_Store() => new byte[1 + 5] { 165, 83, 116, 111, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateStoreResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Store());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Serialize(ref writer, value.Store, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateStoreResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateStoreResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435711603795UL) { goto FAIL; }

                        ____result.Store = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateWeb3AppRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateWeb3AppRequest>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateWeb3AppRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateWeb3AppRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateWeb3AppRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateWeb3AppResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.CreateWeb3AppResponse>
    {
        // App
        private static global::System.ReadOnlySpan<byte> GetSpan_App() => new byte[1 + 3] { 163, 65, 112, 112 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.CreateWeb3AppResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_App());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>(formatterResolver).Serialize(ref writer, value.App, options);
        }

        public global::HyperEdge.Shared.Protocol.CreateWeb3AppResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.CreateWeb3AppResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7368769UL) { goto FAIL; }

                        ____result.App = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeleteApiKeyRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.DeleteApiKeyRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.DeleteApiKeyRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.DeleteApiKeyRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.DeleteApiKeyRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeleteApiKeyResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.DeleteApiKeyResponse>
    {
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.DeleteApiKeyResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::HyperEdge.Shared.Protocol.DeleteApiKeyResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.DeleteApiKeyResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501618079059UL) { goto FAIL; }

                        ____result.Success = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeployContractRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.DeployContractRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ContractType
        private static global::System.ReadOnlySpan<byte> GetSpan_ContractType() => new byte[1 + 12] { 172, 67, 111, 110, 116, 114, 97, 99, 116, 84, 121, 112, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.DeployContractRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_ContractType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ContractType, options);
        }

        public global::HyperEdge.Shared.Protocol.DeployContractRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.DeployContractRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ContractType().Slice(1))) { goto FAIL; }

                        ____result.ContractType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeployContractResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.DeployContractResponse>
    {
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };
        // TaskId
        private static global::System.ReadOnlySpan<byte> GetSpan_TaskId() => new byte[1 + 6] { 166, 84, 97, 115, 107, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.DeployContractResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
            writer.WriteRaw(GetSpan_TaskId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TaskId, options);
        }

        public global::HyperEdge.Shared.Protocol.DeployContractResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.DeployContractResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501618079059UL) { goto FAIL; }

                        ____result.Success = reader.ReadBoolean();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266498113876UL) { goto FAIL; }

                        ____result.TaskId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc721DataDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Erc721DataDTO>
    {
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Erc721DataDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Erc721DataDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Erc721DataDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ExportAppDefRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ExportAppDefRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // AppDef
        private static global::System.ReadOnlySpan<byte> GetSpan_AppDef() => new byte[1 + 6] { 166, 65, 112, 112, 68, 101, 102 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ExportAppDefRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_AppDef());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO>(formatterResolver).Serialize(ref writer, value.AppDef, options);
        }

        public global::HyperEdge.Shared.Protocol.ExportAppDefRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ExportAppDefRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 112585125949505UL) { goto FAIL; }

                        ____result.AppDef = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ExportAppDefResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ExportAppDefResponse>
    {
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ExportAppDefResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.ExportAppDefResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ExportAppDefResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetAccountRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetAccountRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetAccountRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetAccountResponse>
    {
        // Account
        private static global::System.ReadOnlySpan<byte> GetSpan_Account() => new byte[1 + 7] { 167, 65, 99, 99, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Account());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Serialize(ref writer, value.Account, options);
        }

        public global::HyperEdge.Shared.Protocol.GetAccountResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetAccountResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32772547957449537UL) { goto FAIL; }

                        ____result.Account = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetChallengeRequest>
    {
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
        }

        public global::HyperEdge.Shared.Protocol.GetChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465624460613UL) { goto FAIL; }

                        ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetChallengeResponse>
    {
        // Challenge
        private static global::System.ReadOnlySpan<byte> GetSpan_Challenge() => new byte[1 + 9] { 169, 67, 104, 97, 108, 108, 101, 110, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Challenge());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Challenge, options);
        }

        public global::HyperEdge.Shared.Protocol.GetChallengeResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetChallengeResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Challenge().Slice(1))) { goto FAIL; }

                        ____result.Challenge = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassContractRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassContractRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassContractRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassContractRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassContractRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassContractResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassContractResponse>
    {
        // DataClassContract
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContract() => new byte[1 + 17] { 177, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassContractResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassContract());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Serialize(ref writer, value.DataClassContract, options);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassContractResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassContractResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContract().Slice(1))) { goto FAIL; }

                        ____result.DataClassContract = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassContractsRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassContractsRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassContractsRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassContractsRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassContractsRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassContractsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassContractsResponse>
    {
        // DataClassContracts
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContracts() => new byte[1 + 18] { 178, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassContractsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassContracts());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>>(formatterResolver).Serialize(ref writer, value.DataClassContracts, options);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassContractsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassContractsResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 18:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContracts().Slice(1))) { goto FAIL; }

                        ____result.DataClassContracts = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassItemsRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassItemsRequest>
    {
        // DataClassContractId
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContractId() => new byte[1 + 19] { 179, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116, 73, 100 };
        // Page
        private static global::System.ReadOnlySpan<byte> GetSpan_Page() => new byte[1 + 4] { 164, 80, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassItemsRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_DataClassContractId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.DataClassContractId, options);
            writer.WriteRaw(GetSpan_Page());
            writer.Write(value.Page);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassItemsRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassItemsRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContractId().Slice(1))) { goto FAIL; }

                        ____result.DataClassContractId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701273936UL) { goto FAIL; }

                        ____result.Page = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetDataClassItemsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetDataClassItemsResponse>
    {
        // Items
        private static global::System.ReadOnlySpan<byte> GetSpan_Items() => new byte[1 + 5] { 165, 73, 116, 101, 109, 115 };
        // NumPages
        private static global::System.ReadOnlySpan<byte> GetSpan_NumPages() => new byte[1 + 8] { 168, 78, 117, 109, 80, 97, 103, 101, 115 };
        // Total
        private static global::System.ReadOnlySpan<byte> GetSpan_Total() => new byte[1 + 5] { 165, 84, 111, 116, 97, 108 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetDataClassItemsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Items());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>>(formatterResolver).Serialize(ref writer, value.Items, options);
            writer.WriteRaw(GetSpan_NumPages());
            writer.Write(value.NumPages);
            writer.WriteRaw(GetSpan_Total());
            writer.Write(value.Total);
        }

        public global::HyperEdge.Shared.Protocol.GetDataClassItemsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetDataClassItemsResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 495756604489UL:
                                ____result.Items = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 465491488596UL:
                                ____result.Total = reader.ReadInt64();
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315165954668328270UL) { goto FAIL; }

                        ____result.NumPages = reader.ReadInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc1155TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc1155TokenRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc1155TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc1155TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc1155TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc1155TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc1155TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc1155TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc1155TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc1155TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc1155TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc1155TokensRequest>
    {
        // Page
        private static global::System.ReadOnlySpan<byte> GetSpan_Page() => new byte[1 + 4] { 164, 80, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc1155TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Page());
            writer.Write(value.Page);
        }

        public global::HyperEdge.Shared.Protocol.GetErc1155TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc1155TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701273936UL) { goto FAIL; }

                        ____result.Page = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc1155TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc1155TokensResponse>
    {
        // NumPages
        private static global::System.ReadOnlySpan<byte> GetSpan_NumPages() => new byte[1 + 8] { 168, 78, 117, 109, 80, 97, 103, 101, 115 };
        // Total
        private static global::System.ReadOnlySpan<byte> GetSpan_Total() => new byte[1 + 5] { 165, 84, 111, 116, 97, 108 };
        // Tokens
        private static global::System.ReadOnlySpan<byte> GetSpan_Tokens() => new byte[1 + 6] { 166, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc1155TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_NumPages());
            writer.Write(value.NumPages);
            writer.WriteRaw(GetSpan_Total());
            writer.Write(value.Total);
            writer.WriteRaw(GetSpan_Tokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>>(formatterResolver).Serialize(ref writer, value.Tokens, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc1155TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc1155TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315165954668328270UL) { goto FAIL; }

                        ____result.NumPages = reader.ReadInt64();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465491488596UL) { goto FAIL; }

                        ____result.Total = reader.ReadInt64();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126917985136468UL) { goto FAIL; }

                        ____result.Tokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc20TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc20TokenRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc20TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc20TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc20TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc20TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc20TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc20TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc20TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc20TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc20TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc20TokensRequest>
    {
        // Page
        private static global::System.ReadOnlySpan<byte> GetSpan_Page() => new byte[1 + 4] { 164, 80, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc20TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Page());
            writer.Write(value.Page);
        }

        public global::HyperEdge.Shared.Protocol.GetErc20TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc20TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701273936UL) { goto FAIL; }

                        ____result.Page = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc20TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc20TokensResponse>
    {
        // NumPages
        private static global::System.ReadOnlySpan<byte> GetSpan_NumPages() => new byte[1 + 8] { 168, 78, 117, 109, 80, 97, 103, 101, 115 };
        // Total
        private static global::System.ReadOnlySpan<byte> GetSpan_Total() => new byte[1 + 5] { 165, 84, 111, 116, 97, 108 };
        // Tokens
        private static global::System.ReadOnlySpan<byte> GetSpan_Tokens() => new byte[1 + 6] { 166, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc20TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_NumPages());
            writer.Write(value.NumPages);
            writer.WriteRaw(GetSpan_Total());
            writer.Write(value.Total);
            writer.WriteRaw(GetSpan_Tokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>>(formatterResolver).Serialize(ref writer, value.Tokens, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc20TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc20TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315165954668328270UL) { goto FAIL; }

                        ____result.NumPages = reader.ReadInt64();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465491488596UL) { goto FAIL; }

                        ____result.Total = reader.ReadInt64();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126917985136468UL) { goto FAIL; }

                        ____result.Tokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc721TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc721TokenRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc721TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc721TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc721TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc721TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc721TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc721TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc721TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc721TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc721TokensRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc721TokensRequest>
    {
        // Page
        private static global::System.ReadOnlySpan<byte> GetSpan_Page() => new byte[1 + 4] { 164, 80, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc721TokensRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Page());
            writer.Write(value.Page);
        }

        public global::HyperEdge.Shared.Protocol.GetErc721TokensRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc721TokensRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701273936UL) { goto FAIL; }

                        ____result.Page = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetErc721TokensResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetErc721TokensResponse>
    {
        // NumPages
        private static global::System.ReadOnlySpan<byte> GetSpan_NumPages() => new byte[1 + 8] { 168, 78, 117, 109, 80, 97, 103, 101, 115 };
        // Total
        private static global::System.ReadOnlySpan<byte> GetSpan_Total() => new byte[1 + 5] { 165, 84, 111, 116, 97, 108 };
        // Tokens
        private static global::System.ReadOnlySpan<byte> GetSpan_Tokens() => new byte[1 + 6] { 166, 84, 111, 107, 101, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetErc721TokensResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_NumPages());
            writer.Write(value.NumPages);
            writer.WriteRaw(GetSpan_Total());
            writer.Write(value.Total);
            writer.WriteRaw(GetSpan_Tokens());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>>(formatterResolver).Serialize(ref writer, value.Tokens, options);
        }

        public global::HyperEdge.Shared.Protocol.GetErc721TokensResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetErc721TokensResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315165954668328270UL) { goto FAIL; }

                        ____result.NumPages = reader.ReadInt64();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465491488596UL) { goto FAIL; }

                        ____result.Total = reader.ReadInt64();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126917985136468UL) { goto FAIL; }

                        ____result.Tokens = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetInventoryItemsRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetInventoryItemsRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetInventoryItemsRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetInventoryItemsRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetInventoryItemsRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetInventoryItemsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetInventoryItemsResponse>
    {
        // Items
        private static global::System.ReadOnlySpan<byte> GetSpan_Items() => new byte[1 + 5] { 165, 73, 116, 101, 109, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetInventoryItemsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Items());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>>(formatterResolver).Serialize(ref writer, value.Items, options);
        }

        public global::HyperEdge.Shared.Protocol.GetInventoryItemsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetInventoryItemsResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495756604489UL) { goto FAIL; }

                        ____result.Items = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetPackageRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetPackageRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetPackageRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetPackageRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetPackageRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetPackageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetPackageResponse>
    {
        // Package
        private static global::System.ReadOnlySpan<byte> GetSpan_Package() => new byte[1 + 7] { 167, 80, 97, 99, 107, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetPackageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Package());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Serialize(ref writer, value.Package, options);
        }

        public global::HyperEdge.Shared.Protocol.GetPackageResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetPackageResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640758939984UL) { goto FAIL; }

                        ____result.Package = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetRegisterAccountChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequest>
    {
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
        }

        public global::HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetRegisterAccountChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetRequestHandlersRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetRequestHandlersRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetRequestHandlersRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetRequestHandlersRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetRequestHandlersRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetRequestHandlersResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetRequestHandlersResponse>
    {
        // Handlers
        private static global::System.ReadOnlySpan<byte> GetSpan_Handlers() => new byte[1 + 8] { 168, 72, 97, 110, 100, 108, 101, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetRequestHandlersResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Handlers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>>(formatterResolver).Serialize(ref writer, value.Handlers, options);
        }

        public global::HyperEdge.Shared.Protocol.GetRequestHandlersResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetRequestHandlersResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8318822977922556232UL) { goto FAIL; }

                        ____result.Handlers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetStoreRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetStoreRequest>
    {
        // StoreId
        private static global::System.ReadOnlySpan<byte> GetSpan_StoreId() => new byte[1 + 7] { 167, 83, 116, 111, 114, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetStoreRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_StoreId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.StoreId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetStoreRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetStoreRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197731497043UL) { goto FAIL; }

                        ____result.StoreId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetStoreResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetStoreResponse>
    {
        // Store
        private static global::System.ReadOnlySpan<byte> GetSpan_Store() => new byte[1 + 5] { 165, 83, 116, 111, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetStoreResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Store());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Serialize(ref writer, value.Store, options);
        }

        public global::HyperEdge.Shared.Protocol.GetStoreResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetStoreResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435711603795UL) { goto FAIL; }

                        ____result.Store = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetStoresRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetStoresRequest>
    {
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // Page
        private static global::System.ReadOnlySpan<byte> GetSpan_Page() => new byte[1 + 4] { 164, 80, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetStoresRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_Page());
            writer.Write(value.Page);
        }

        public global::HyperEdge.Shared.Protocol.GetStoresRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetStoresRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701273936UL) { goto FAIL; }

                        ____result.Page = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetStoresResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetStoresResponse>
    {
        // Stores
        private static global::System.ReadOnlySpan<byte> GetSpan_Stores() => new byte[1 + 6] { 166, 83, 116, 111, 114, 101, 115 };
        // NumPages
        private static global::System.ReadOnlySpan<byte> GetSpan_NumPages() => new byte[1 + 8] { 168, 78, 117, 109, 80, 97, 103, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetStoresResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Stores());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.StoreDTO>>(formatterResolver).Serialize(ref writer, value.Stores, options);
            writer.WriteRaw(GetSpan_NumPages());
            writer.Write(value.NumPages);
        }

        public global::HyperEdge.Shared.Protocol.GetStoresResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetStoresResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879548798035UL) { goto FAIL; }

                        ____result.Stores = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.StoreDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315165954668328270UL) { goto FAIL; }

                        ____result.NumPages = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetWeb3AppRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetWeb3AppRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetWeb3AppRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::HyperEdge.Shared.Protocol.GetWeb3AppRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetWeb3AppRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetWeb3AppResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetWeb3AppResponse>
    {
        // App
        private static global::System.ReadOnlySpan<byte> GetSpan_App() => new byte[1 + 3] { 163, 65, 112, 112 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetWeb3AppResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_App());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>(formatterResolver).Serialize(ref writer, value.App, options);
        }

        public global::HyperEdge.Shared.Protocol.GetWeb3AppResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetWeb3AppResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7368769UL) { goto FAIL; }

                        ____result.App = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetWeb3AppsRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetWeb3AppsRequest>
    {
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetWeb3AppsRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
        }

        public global::HyperEdge.Shared.Protocol.GetWeb3AppsRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetWeb3AppsRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GetWeb3AppsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.GetWeb3AppsResponse>
    {
        // Apps
        private static global::System.ReadOnlySpan<byte> GetSpan_Apps() => new byte[1 + 4] { 164, 65, 112, 112, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.GetWeb3AppsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Apps());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>>(formatterResolver).Serialize(ref writer, value.Apps, options);
        }

        public global::HyperEdge.Shared.Protocol.GetWeb3AppsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.GetWeb3AppsResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936748609UL) { goto FAIL; }

                        ____result.Apps = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.RegisterAccountRequest>
    {
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // Signature
        private static global::System.ReadOnlySpan<byte> GetSpan_Signature() => new byte[1 + 9] { 169, 83, 105, 103, 110, 97, 116, 117, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.RegisterAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_Signature());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Signature, options);
        }

        public global::HyperEdge.Shared.Protocol.RegisterAccountRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.RegisterAccountRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465624460613UL) { goto FAIL; }

                        ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Signature().Slice(1))) { goto FAIL; }

                        ____result.Signature = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.RegisterAccountResponse>
    {
        // Account
        private static global::System.ReadOnlySpan<byte> GetSpan_Account() => new byte[1 + 7] { 167, 65, 99, 99, 111, 117, 110, 116 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.RegisterAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Account());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Serialize(ref writer, value.Account, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::HyperEdge.Shared.Protocol.RegisterAccountResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.RegisterAccountResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 32772547957449537UL:
                                ____result.Account = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ReleaseAppDefRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ReleaseAppDefRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // VersionName
        private static global::System.ReadOnlySpan<byte> GetSpan_VersionName() => new byte[1 + 11] { 171, 86, 101, 114, 115, 105, 111, 110, 78, 97, 109, 101 };
        // AppDef
        private static global::System.ReadOnlySpan<byte> GetSpan_AppDef() => new byte[1 + 6] { 166, 65, 112, 112, 68, 101, 102 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ReleaseAppDefRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_VersionName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.VersionName, options);
            writer.WriteRaw(GetSpan_AppDef());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO>(formatterResolver).Serialize(ref writer, value.AppDef, options);
        }

        public global::HyperEdge.Shared.Protocol.ReleaseAppDefRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ReleaseAppDefRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_VersionName().Slice(1))) { goto FAIL; }

                        ____result.VersionName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 112585125949505UL) { goto FAIL; }

                        ____result.AppDef = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ReleaseAppDefResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ReleaseAppDefResponse>
    {
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ReleaseAppDefResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.ReleaseAppDefResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ReleaseAppDefResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuleWorkflowsDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO>
    {
        // WorkflowsJson
        private static global::System.ReadOnlySpan<byte> GetSpan_WorkflowsJson() => new byte[1 + 13] { 173, 87, 111, 114, 107, 102, 108, 111, 119, 115, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_WorkflowsJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.WorkflowsJson, options);
        }

        public global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.RuleWorkflowsDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_WorkflowsJson().Slice(1))) { goto FAIL; }

                        ____result.WorkflowsJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetPackagePriceRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.SetPackagePriceRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // PriceId
        private static global::System.ReadOnlySpan<byte> GetSpan_PriceId() => new byte[1 + 7] { 167, 80, 114, 105, 99, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.SetPackagePriceRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_PriceId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PriceId, options);
        }

        public global::HyperEdge.Shared.Protocol.SetPackagePriceRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.SetPackagePriceRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197479445072UL) { goto FAIL; }

                        ____result.PriceId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetPackagePriceResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.SetPackagePriceResponse>
    {
        // Package
        private static global::System.ReadOnlySpan<byte> GetSpan_Package() => new byte[1 + 7] { 167, 80, 97, 99, 107, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.SetPackagePriceResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Package());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Serialize(ref writer, value.Package, options);
        }

        public global::HyperEdge.Shared.Protocol.SetPackagePriceResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.SetPackagePriceResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640758939984UL) { goto FAIL; }

                        ____result.Package = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateAccountRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // PasswordHash
        private static global::System.ReadOnlySpan<byte> GetSpan_PasswordHash() => new byte[1 + 12] { 172, 80, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104 };
        // Phone
        private static global::System.ReadOnlySpan<byte> GetSpan_Phone() => new byte[1 + 5] { 165, 80, 104, 111, 110, 101 };
        // Address
        private static global::System.ReadOnlySpan<byte> GetSpan_Address() => new byte[1 + 7] { 167, 65, 100, 100, 114, 101, 115, 115 };
        // EKS
        private static global::System.ReadOnlySpan<byte> GetSpan_EKS() => new byte[1 + 3] { 163, 69, 75, 83 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateAccountRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_PasswordHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(GetSpan_Phone());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(GetSpan_Address());
            writer.Write(value.Address);
            writer.WriteRaw(GetSpan_EKS());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EKS, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateAccountRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateAccountRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 465624460613UL:
                                ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 435644491856UL:
                                ____result.Phone = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PasswordHash().Slice(1))) { goto FAIL; }

                        ____result.PasswordHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501869798465UL) { goto FAIL; }

                        ____result.Address = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 5458757UL) { goto FAIL; }

                        ____result.EKS = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateDataClassItemRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateDataClassItemRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateDataClassItemRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateDataClassItemRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateDataClassItemRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateDataClassItemResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateDataClassItemResponse>
    {
        // DataClassItem
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassItem() => new byte[1 + 13] { 173, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 116, 101, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateDataClassItemResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassItem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Serialize(ref writer, value.DataClassItem, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateDataClassItemResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateDataClassItemResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassItem().Slice(1))) { goto FAIL; }

                        ____result.DataClassItem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateDataClassRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateDataClassRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateDataClassRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateDataClassRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateDataClassRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateDataClassResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateDataClassResponse>
    {
        // DataClassContract
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContract() => new byte[1 + 17] { 177, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateDataClassResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_DataClassContract());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Serialize(ref writer, value.DataClassContract, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateDataClassResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateDataClassResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContract().Slice(1))) { goto FAIL; }

                        ____result.DataClassContract = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateErc721TokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateErc721TokenRequest>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // DataJson
        private static global::System.ReadOnlySpan<byte> GetSpan_DataJson() => new byte[1 + 8] { 168, 68, 97, 116, 97, 74, 115, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateErc721TokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_DataJson());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Erc721DataDTO>(formatterResolver).Serialize(ref writer, value.DataJson, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateErc721TokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateErc721TokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957705829886746948UL) { goto FAIL; }

                        ____result.DataJson = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Erc721DataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateErc721TokenResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateErc721TokenResponse>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateErc721TokenResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Serialize(ref writer, value.Token, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateErc721TokenResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateErc721TokenResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdatePackageRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdatePackageRequest>
    {
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdatePackageRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdatePackageRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdatePackageRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PackageId().Slice(1))) { goto FAIL; }

                        ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdatePackageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdatePackageResponse>
    {
        // Package
        private static global::System.ReadOnlySpan<byte> GetSpan_Package() => new byte[1 + 7] { 167, 80, 97, 99, 107, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdatePackageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Package());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Serialize(ref writer, value.Package, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdatePackageResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdatePackageResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640758939984UL) { goto FAIL; }

                        ____result.Package = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.PackageDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateStoreRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateStoreRequest>
    {
        // StoreId
        private static global::System.ReadOnlySpan<byte> GetSpan_StoreId() => new byte[1 + 7] { 167, 83, 116, 111, 114, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateStoreRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_StoreId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.StoreId, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateStoreRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateStoreRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197731497043UL) { goto FAIL; }

                        ____result.StoreId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateStoreResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateStoreResponse>
    {
        // Store
        private static global::System.ReadOnlySpan<byte> GetSpan_Store() => new byte[1 + 5] { 165, 83, 116, 111, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateStoreResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Store());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Serialize(ref writer, value.Store, options);
        }

        public global::HyperEdge.Shared.Protocol.UpdateStoreResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateStoreResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435711603795UL) { goto FAIL; }

                        ____result.Store = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.StoreDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateChallengeRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ValidateChallengeRequest>
    {
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // Signature
        private static global::System.ReadOnlySpan<byte> GetSpan_Signature() => new byte[1 + 9] { 169, 83, 105, 103, 110, 97, 116, 117, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ValidateChallengeRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_Signature());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Signature, options);
        }

        public global::HyperEdge.Shared.Protocol.ValidateChallengeRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ValidateChallengeRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465624460613UL) { goto FAIL; }

                        ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Signature().Slice(1))) { goto FAIL; }

                        ____result.Signature = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol.Apps
{
    public sealed class BuildAppRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.BuildAppRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // VersionName
        private static global::System.ReadOnlySpan<byte> GetSpan_VersionName() => new byte[1 + 11] { 171, 86, 101, 114, 115, 105, 111, 110, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.BuildAppRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_VersionName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.VersionName, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.BuildAppRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.BuildAppRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_VersionName().Slice(1))) { goto FAIL; }

                        ____result.VersionName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BuildAppResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.BuildAppResponse>
    {
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.BuildAppResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.BuildAppResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.BuildAppResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateAppEnvRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateAppEnvResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponse>
    {
        // AppEnv
        private static global::System.ReadOnlySpan<byte> GetSpan_AppEnv() => new byte[1 + 6] { 166, 65, 112, 112, 69, 110, 118 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_AppEnv());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AppEnvDTO>(formatterResolver).Serialize(ref writer, value.AppEnv, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.CreateAppEnvResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 130215983476801UL) { goto FAIL; }

                        ____result.AppEnv = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AppEnvDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RunAppRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.RunAppRequest>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // VersionId
        private static global::System.ReadOnlySpan<byte> GetSpan_VersionId() => new byte[1 + 9] { 169, 86, 101, 114, 115, 105, 111, 110, 73, 100 };
        // EnvId
        private static global::System.ReadOnlySpan<byte> GetSpan_EnvId() => new byte[1 + 5] { 165, 69, 110, 118, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.RunAppRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_VersionId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.VersionId, options);
            writer.WriteRaw(GetSpan_EnvId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.EnvId, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.RunAppRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.RunAppRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 430728835137UL:
                                ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 430729227845UL:
                                ____result.EnvId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_VersionId().Slice(1))) { goto FAIL; }

                        ____result.VersionId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RunAppResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Apps.RunAppResponse>
    {
        // JobId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobId() => new byte[1 + 5] { 165, 74, 111, 98, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Apps.RunAppResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_JobId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobId, options);
        }

        public global::HyperEdge.Shared.Protocol.Apps.RunAppResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Apps.RunAppResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430727917386UL) { goto FAIL; }

                        ____result.JobId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol
{
    public sealed class ChatMessageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ChatMessageResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ChatMessageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
        }

        public global::HyperEdge.Shared.Protocol.ChatMessageResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.ChatMessageResponse();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.UserName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinChatRoomRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.JoinChatRoomRequest>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.JoinChatRoomRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserName, options);
        }

        public global::HyperEdge.Shared.Protocol.JoinChatRoomRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.JoinChatRoomRequest();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.RoomName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.UserName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateAccountResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.UpdateAccountResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.UpdateAccountResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Serialize(ref writer, value.Account, options);
            writer.Write(value.Success);
        }

        public global::HyperEdge.Shared.Protocol.UpdateAccountResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.UpdateAccountResponse();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Account = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.AccountDTO>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Success = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ValidateChallengeResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.ValidateChallengeResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.ValidateChallengeResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Token, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Serialize(ref writer, value.Expiration, options);
            writer.Write(value.Success);
        }

        public global::HyperEdge.Shared.Protocol.ValidateChallengeResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Token__ = default(string);
            var __Expiration__ = default(global::System.DateTimeOffset);
            var __Success__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Token__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Expiration__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Success__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::HyperEdge.Shared.Protocol.ValidateChallengeResponse(__Token__, __Expiration__);
            if (length <= 2)
            {
                goto MEMBER_ASSIGNMENT_END;
            }

            ____result.Success = __Success__;

        MEMBER_ASSIGNMENT_END:
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol.Models
{
    public sealed class AccountDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.AccountDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // PasswordHash
        private static global::System.ReadOnlySpan<byte> GetSpan_PasswordHash() => new byte[1 + 12] { 172, 80, 97, 115, 115, 119, 111, 114, 100, 72, 97, 115, 104 };
        // Phone
        private static global::System.ReadOnlySpan<byte> GetSpan_Phone() => new byte[1 + 5] { 165, 80, 104, 111, 110, 101 };
        // EKSHash
        private static global::System.ReadOnlySpan<byte> GetSpan_EKSHash() => new byte[1 + 7] { 167, 69, 75, 83, 72, 97, 115, 104 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.AccountDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_PasswordHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PasswordHash, options);
            writer.WriteRaw(GetSpan_Phone());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Phone, options);
            writer.WriteRaw(GetSpan_EKSHash());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EKSHash, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.AccountDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.AccountDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 465624460613UL:
                                ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 435644491856UL:
                                ____result.Phone = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PasswordHash().Slice(1))) { goto FAIL; }

                        ____result.PasswordHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29400259240348485UL) { goto FAIL; }

                        ____result.EKSHash = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AppEnvDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.AppEnvDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.AppEnvDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.AppEnvDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.AppEnvDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ContractFieldDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Typename
        private static global::System.ReadOnlySpan<byte> GetSpan_Typename() => new byte[1 + 8] { 168, 84, 121, 112, 101, 110, 97, 109, 101 };
        // DefaultValue
        private static global::System.ReadOnlySpan<byte> GetSpan_DefaultValue() => new byte[1 + 12] { 172, 68, 101, 102, 97, 117, 108, 116, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Typename());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Typename, options);
            writer.WriteRaw(GetSpan_DefaultValue());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DefaultValue, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604897068349780UL) { goto FAIL; }

                        ____result.Typename = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DefaultValue().Slice(1))) { goto FAIL; }

                        ____result.DefaultValue = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassContractDataDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>
    {
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassContractDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Type());
            writer.Write(value.Type);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.DataClassContractDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                ____result.Type = reader.ReadInt32();
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassItemDataDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>
    {
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassItemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // DataClassContract
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassContract() => new byte[1 + 17] { 177, 68, 97, 116, 97, 67, 108, 97, 115, 115, 67, 111, 110, 116, 114, 97, 99, 116 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_DataClassContract());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.DataClassContract, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.DataClassItemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassContract().Slice(1))) { goto FAIL; }

                        ____result.DataClassContract = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc1155ItemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // DataClassItem
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassItem() => new byte[1 + 13] { 173, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 116, 101, 109 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_DataClassItem());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.DataClassItem, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Erc1155ItemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassItem().Slice(1))) { goto FAIL; }

                        ____result.DataClassItem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc1155TokenDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // Abi
        private static global::System.ReadOnlySpan<byte> GetSpan_Abi() => new byte[1 + 3] { 163, 65, 98, 105 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_Abi());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Abi, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Erc1155TokenDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1635017028UL) { goto FAIL; }

                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6906433UL) { goto FAIL; }

                        ____result.Abi = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc20TokenDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Symbol
        private static global::System.ReadOnlySpan<byte> GetSpan_Symbol() => new byte[1 + 6] { 166, 83, 121, 109, 98, 111, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // Abi
        private static global::System.ReadOnlySpan<byte> GetSpan_Abi() => new byte[1 + 3] { 163, 65, 98, 105 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Symbol());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Symbol, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_Abi());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Abi, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Erc20TokenDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 119225648511315UL) { goto FAIL; }

                        ____result.Symbol = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6906433UL) { goto FAIL; }

                        ____result.Abi = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc721TokenDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // AddressHex
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressHex() => new byte[1 + 10] { 170, 65, 100, 100, 114, 101, 115, 115, 72, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // Abi
        private static global::System.ReadOnlySpan<byte> GetSpan_Abi() => new byte[1 + 3] { 163, 65, 98, 105 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_AddressHex());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AddressHex, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_Abi());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Abi, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Erc721TokenDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressHex().Slice(1))) { goto FAIL; }

                        ____result.AddressHex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6906433UL) { goto FAIL; }

                        ____result.Abi = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PackageDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PackageDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // StoreId
        private static global::System.ReadOnlySpan<byte> GetSpan_StoreId() => new byte[1 + 7] { 167, 83, 116, 111, 114, 101, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PackageDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_StoreId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.StoreId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PackageDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PackageDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197731497043UL) { goto FAIL; }

                        ____result.StoreId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PackageErc1155TokensDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PackageErc1155TokensDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5288747005527679312UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PackageErc20TokensDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PackageErc20TokensDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5288747005527679312UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017765461313UL) { goto FAIL; }

                        ____result.Amount = reader.ReadUInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PackageErc721TokensDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // PackageId
        private static global::System.ReadOnlySpan<byte> GetSpan_PackageId() => new byte[1 + 9] { 169, 80, 97, 99, 107, 97, 103, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_PackageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PackageId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PackageErc721TokensDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5288747005527679312UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                ____result.PackageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228236167835476UL) { goto FAIL; }

                        ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869908UL) { goto FAIL; }

                        ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017765461313UL) { goto FAIL; }

                        ____result.Amount = reader.ReadUInt64();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PriceDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PriceDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PriceDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PriceDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PriceDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PriceErc1155TokensDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // PriceId
        private static global::System.ReadOnlySpan<byte> GetSpan_PriceId() => new byte[1 + 7] { 167, 80, 114, 105, 99, 101, 73, 100 };
        // TokenId
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenId() => new byte[1 + 7] { 167, 84, 111, 107, 101, 110, 73, 100 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_PriceId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.PriceId, options);
            writer.WriteRaw(GetSpan_TokenId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.TokenId, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.PriceErc1155TokensDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28228197479445072UL:
                                ____result.PriceId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 28228236167835476UL:
                                ____result.TokenId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestHandlerDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RequestClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestClassId() => new byte[1 + 14] { 174, 82, 101, 113, 117, 101, 115, 116, 67, 108, 97, 115, 115, 73, 100 };
        // ResponseClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_ResponseClassId() => new byte[1 + 15] { 175, 82, 101, 115, 112, 111, 110, 115, 101, 67, 108, 97, 115, 115, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RequestClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.RequestClassId, options);
            writer.WriteRaw(GetSpan_ResponseClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ResponseClassId, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.RequestHandlerDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RequestClassId().Slice(1))) { goto FAIL; }

                        ____result.RequestClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ResponseClassId().Slice(1))) { goto FAIL; }

                        ____result.ResponseClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StoreDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.StoreDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // MerchantId
        private static global::System.ReadOnlySpan<byte> GetSpan_MerchantId() => new byte[1 + 10] { 170, 77, 101, 114, 99, 104, 97, 110, 116, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.StoreDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_MerchantId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.MerchantId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.StoreDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.StoreDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MerchantId().Slice(1))) { goto FAIL; }

                        ____result.MerchantId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Web3AppDataDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Web3AppDataDTO>
    {
        // DiamondCutFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_DiamondCutFacetAddress() => new byte[1 + 22] { 182, 68, 105, 97, 109, 111, 110, 100, 67, 117, 116, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };
        // DiamondLoupeFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_DiamondLoupeFacetAddress() => new byte[1 + 24] { 184, 68, 105, 97, 109, 111, 110, 100, 76, 111, 117, 112, 101, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };
        // OwnershipFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnershipFacetAddress() => new byte[1 + 21] { 181, 79, 119, 110, 101, 114, 115, 104, 105, 112, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };
        // DiamondAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_DiamondAddress() => new byte[1 + 14] { 174, 68, 105, 97, 109, 111, 110, 100, 65, 100, 100, 114, 101, 115, 115 };
        // InventoryFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_InventoryFacetAddress() => new byte[1 + 21] { 181, 73, 110, 118, 101, 110, 116, 111, 114, 121, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };
        // ShopFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_ShopFacetAddress() => new byte[1 + 16] { 176, 83, 104, 111, 112, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };
        // MarketFacetAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_MarketFacetAddress() => new byte[1 + 18] { 178, 77, 97, 114, 107, 101, 116, 70, 97, 99, 101, 116, 65, 100, 100, 114, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Web3AppDataDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_DiamondCutFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DiamondCutFacetAddress, options);
            writer.WriteRaw(GetSpan_DiamondLoupeFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DiamondLoupeFacetAddress, options);
            writer.WriteRaw(GetSpan_OwnershipFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.OwnershipFacetAddress, options);
            writer.WriteRaw(GetSpan_DiamondAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DiamondAddress, options);
            writer.WriteRaw(GetSpan_InventoryFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.InventoryFacetAddress, options);
            writer.WriteRaw(GetSpan_ShopFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ShopFacetAddress, options);
            writer.WriteRaw(GetSpan_MarketFacetAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.MarketFacetAddress, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Web3AppDataDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Web3AppDataDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 22:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DiamondCutFacetAddress().Slice(1))) { goto FAIL; }

                        ____result.DiamondCutFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 24:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DiamondLoupeFacetAddress().Slice(1))) { goto FAIL; }

                        ____result.DiamondLoupeFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 21:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7595447706725545807UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_OwnershipFacetAddress().Slice(1 + 8))) { goto FAIL; }

                                ____result.OwnershipFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8245937460236152393UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_InventoryFacetAddress().Slice(1 + 8))) { goto FAIL; }

                                ____result.InventoryFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DiamondAddress().Slice(1))) { goto FAIL; }

                        ____result.DiamondAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ShopFacetAddress().Slice(1))) { goto FAIL; }

                        ____result.ShopFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 18:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MarketFacetAddress().Slice(1))) { goto FAIL; }

                        ____result.MarketFacetAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Web3AppDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Web3AppDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // OwnerId
        private static global::System.ReadOnlySpan<byte> GetSpan_OwnerId() => new byte[1 + 7] { 167, 79, 119, 110, 101, 114, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };
        // UpdatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_UpdatedAt() => new byte[1 + 9] { 169, 85, 112, 100, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Web3AppDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_OwnerId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.OwnerId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.CreatedAt, options);
            writer.WriteRaw(GetSpan_UpdatedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.UpdatedAt, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Web3AppDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Web3AppDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228253347903311UL) { goto FAIL; }

                        ____result.OwnerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.CreatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4712002660660965461UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.UpdatedAt = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Export
{
    public sealed class AppDefDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO>
    {
        // AppId
        private static global::System.ReadOnlySpan<byte> GetSpan_AppId() => new byte[1 + 5] { 165, 65, 112, 112, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // DataClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClasses() => new byte[1 + 11] { 171, 68, 97, 116, 97, 67, 108, 97, 115, 115, 101, 115 };
        // UGCDataClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_UGCDataClasses() => new byte[1 + 14] { 174, 85, 71, 67, 68, 97, 116, 97, 67, 108, 97, 115, 115, 101, 115 };
        // ModelClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_ModelClasses() => new byte[1 + 12] { 172, 77, 111, 100, 101, 108, 67, 108, 97, 115, 115, 101, 115 };
        // StructClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_StructClasses() => new byte[1 + 13] { 173, 83, 116, 114, 117, 99, 116, 67, 108, 97, 115, 115, 101, 115 };
        // EventClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_EventClasses() => new byte[1 + 12] { 172, 69, 118, 101, 110, 116, 67, 108, 97, 115, 115, 101, 115 };
        // StorageClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_StorageClasses() => new byte[1 + 14] { 174, 83, 116, 111, 114, 97, 103, 101, 67, 108, 97, 115, 115, 101, 115 };
        // GroupClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_GroupClasses() => new byte[1 + 12] { 172, 71, 114, 111, 117, 112, 67, 108, 97, 115, 115, 101, 115 };
        // DataClassInstances
        private static global::System.ReadOnlySpan<byte> GetSpan_DataClassInstances() => new byte[1 + 18] { 178, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 110, 115, 116, 97, 110, 99, 101, 115 };
        // Inventories
        private static global::System.ReadOnlySpan<byte> GetSpan_Inventories() => new byte[1 + 11] { 171, 73, 110, 118, 101, 110, 116, 111, 114, 105, 101, 115 };
        // CraftRules
        private static global::System.ReadOnlySpan<byte> GetSpan_CraftRules() => new byte[1 + 10] { 170, 67, 114, 97, 102, 116, 82, 117, 108, 101, 115 };
        // Quests
        private static global::System.ReadOnlySpan<byte> GetSpan_Quests() => new byte[1 + 6] { 166, 81, 117, 101, 115, 116, 115 };
        // Progressions
        private static global::System.ReadOnlySpan<byte> GetSpan_Progressions() => new byte[1 + 12] { 172, 80, 114, 111, 103, 114, 101, 115, 115, 105, 111, 110, 115 };
        // ProgressionLadders
        private static global::System.ReadOnlySpan<byte> GetSpan_ProgressionLadders() => new byte[1 + 18] { 178, 80, 114, 111, 103, 114, 101, 115, 115, 105, 111, 110, 76, 97, 100, 100, 101, 114, 115 };
        // BattlePasses
        private static global::System.ReadOnlySpan<byte> GetSpan_BattlePasses() => new byte[1 + 12] { 172, 66, 97, 116, 116, 108, 101, 80, 97, 115, 115, 101, 115 };
        // BattlePassInstances
        private static global::System.ReadOnlySpan<byte> GetSpan_BattlePassInstances() => new byte[1 + 19] { 179, 66, 97, 116, 116, 108, 101, 80, 97, 115, 115, 73, 110, 115, 116, 97, 110, 99, 101, 115 };
        // Tournaments
        private static global::System.ReadOnlySpan<byte> GetSpan_Tournaments() => new byte[1 + 11] { 171, 84, 111, 117, 114, 110, 97, 109, 101, 110, 116, 115 };
        // Rewards
        private static global::System.ReadOnlySpan<byte> GetSpan_Rewards() => new byte[1 + 7] { 167, 82, 101, 119, 97, 114, 100, 115 };
        // EnergySystems
        private static global::System.ReadOnlySpan<byte> GetSpan_EnergySystems() => new byte[1 + 13] { 173, 69, 110, 101, 114, 103, 121, 83, 121, 115, 116, 101, 109, 115 };
        // RequestHandlers
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestHandlers() => new byte[1 + 15] { 175, 82, 101, 113, 117, 101, 115, 116, 72, 97, 110, 100, 108, 101, 114, 115 };
        // JobHandlers
        private static global::System.ReadOnlySpan<byte> GetSpan_JobHandlers() => new byte[1 + 11] { 171, 74, 111, 98, 72, 97, 110, 100, 108, 101, 114, 115 };
        // EventHandlers
        private static global::System.ReadOnlySpan<byte> GetSpan_EventHandlers() => new byte[1 + 13] { 173, 69, 118, 101, 110, 116, 72, 97, 110, 100, 108, 101, 114, 115 };
        // AbilitySystems
        private static global::System.ReadOnlySpan<byte> GetSpan_AbilitySystems() => new byte[1 + 14] { 174, 65, 98, 105, 108, 105, 116, 121, 83, 121, 115, 116, 101, 109, 115 };
        // AbilityGraphs
        private static global::System.ReadOnlySpan<byte> GetSpan_AbilityGraphs() => new byte[1 + 13] { 173, 65, 98, 105, 108, 105, 116, 121, 71, 114, 97, 112, 104, 115 };
        // AbilityNodes
        private static global::System.ReadOnlySpan<byte> GetSpan_AbilityNodes() => new byte[1 + 12] { 172, 65, 98, 105, 108, 105, 116, 121, 78, 111, 100, 101, 115 };
        // MsgRelaySystems
        private static global::System.ReadOnlySpan<byte> GetSpan_MsgRelaySystems() => new byte[1 + 15] { 175, 77, 115, 103, 82, 101, 108, 97, 121, 83, 121, 115, 116, 101, 109, 115 };
        // TurnGameSystems
        private static global::System.ReadOnlySpan<byte> GetSpan_TurnGameSystems() => new byte[1 + 15] { 175, 84, 117, 114, 110, 71, 97, 109, 101, 83, 121, 115, 116, 101, 109, 115 };
        // NetEntities
        private static global::System.ReadOnlySpan<byte> GetSpan_NetEntities() => new byte[1 + 11] { 171, 78, 101, 116, 69, 110, 116, 105, 116, 105, 101, 115 };
        // MultiPlayerSystems
        private static global::System.ReadOnlySpan<byte> GetSpan_MultiPlayerSystems() => new byte[1 + 18] { 178, 77, 117, 108, 116, 105, 80, 108, 97, 121, 101, 114, 83, 121, 115, 116, 101, 109, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(30);
            writer.WriteRaw(GetSpan_AppId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.AppId, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_DataClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.DataClasses, options);
            writer.WriteRaw(GetSpan_UGCDataClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.UGCDataClasses, options);
            writer.WriteRaw(GetSpan_ModelClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.ModelClasses, options);
            writer.WriteRaw(GetSpan_StructClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.StructClasses, options);
            writer.WriteRaw(GetSpan_EventClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.EventClasses, options);
            writer.WriteRaw(GetSpan_StorageClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Tuple<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>>(formatterResolver).Serialize(ref writer, value.StorageClasses, options);
            writer.WriteRaw(GetSpan_GroupClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO>>(formatterResolver).Serialize(ref writer, value.GroupClasses, options);
            writer.WriteRaw(GetSpan_DataClassInstances());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>>>(formatterResolver).Serialize(ref writer, value.DataClassInstances, options);
            writer.WriteRaw(GetSpan_Inventories());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO>>(formatterResolver).Serialize(ref writer, value.Inventories, options);
            writer.WriteRaw(GetSpan_CraftRules());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>>(formatterResolver).Serialize(ref writer, value.CraftRules, options);
            writer.WriteRaw(GetSpan_Quests());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>>(formatterResolver).Serialize(ref writer, value.Quests, options);
            writer.WriteRaw(GetSpan_Progressions());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>>(formatterResolver).Serialize(ref writer, value.Progressions, options);
            writer.WriteRaw(GetSpan_ProgressionLadders());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>>(formatterResolver).Serialize(ref writer, value.ProgressionLadders, options);
            writer.WriteRaw(GetSpan_BattlePasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>>(formatterResolver).Serialize(ref writer, value.BattlePasses, options);
            writer.WriteRaw(GetSpan_BattlePassInstances());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO>>(formatterResolver).Serialize(ref writer, value.BattlePassInstances, options);
            writer.WriteRaw(GetSpan_Tournaments());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>>(formatterResolver).Serialize(ref writer, value.Tournaments, options);
            writer.WriteRaw(GetSpan_Rewards());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>>(formatterResolver).Serialize(ref writer, value.Rewards, options);
            writer.WriteRaw(GetSpan_EnergySystems());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>>(formatterResolver).Serialize(ref writer, value.EnergySystems, options);
            writer.WriteRaw(GetSpan_RequestHandlers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO>>(formatterResolver).Serialize(ref writer, value.RequestHandlers, options);
            writer.WriteRaw(GetSpan_JobHandlers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO>>(formatterResolver).Serialize(ref writer, value.JobHandlers, options);
            writer.WriteRaw(GetSpan_EventHandlers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO>>(formatterResolver).Serialize(ref writer, value.EventHandlers, options);
            writer.WriteRaw(GetSpan_AbilitySystems());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO>>(formatterResolver).Serialize(ref writer, value.AbilitySystems, options);
            writer.WriteRaw(GetSpan_AbilityGraphs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO>>(formatterResolver).Serialize(ref writer, value.AbilityGraphs, options);
            writer.WriteRaw(GetSpan_AbilityNodes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO>>(formatterResolver).Serialize(ref writer, value.AbilityNodes, options);
            writer.WriteRaw(GetSpan_MsgRelaySystems());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO>>(formatterResolver).Serialize(ref writer, value.MsgRelaySystems, options);
            writer.WriteRaw(GetSpan_TurnGameSystems());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO>>(formatterResolver).Serialize(ref writer, value.TurnGameSystems, options);
            writer.WriteRaw(GetSpan_NetEntities());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO>>(formatterResolver).Serialize(ref writer, value.NetEntities, options);
            writer.WriteRaw(GetSpan_MultiPlayerSystems());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO>>(formatterResolver).Serialize(ref writer, value.MultiPlayerSystems, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.AppDefDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 430728835137UL) { goto FAIL; }

                        ____result.AppId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8314045423756271940UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7562611UL) { goto FAIL; }

                                ____result.DataClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8245937460236152393UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7562601UL) { goto FAIL; }

                                ____result.Inventories = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7308604897286778708UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7566446UL) { goto FAIL; }

                                ____result.Tournaments = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7810489017872576330UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7565925UL) { goto FAIL; }

                                ____result.JobHandlers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8388363797914740046UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7562601UL) { goto FAIL; }

                                ____result.NetEntities = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4855289834388014933UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879565832556UL) { goto FAIL; }

                                ____result.UGCDataClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4856401441418343507UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879565832556UL) { goto FAIL; }

                                ____result.StorageClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Tuple<int, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 6014966773469241921UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126913690760057UL) { goto FAIL; }

                                ____result.AbilitySystems = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7020060052000370509UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936028531UL) { goto FAIL; }

                                ____result.ModelClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7020060086511171141UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936028531UL) { goto FAIL; }

                                ____result.EventClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7020060069449396807UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936028531UL) { goto FAIL; }

                                ____result.GroupClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8319104478719472208UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936617321UL) { goto FAIL; }

                                ____result.Progressions = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7012216136300519746UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936028531UL) { goto FAIL; }

                                ____result.BattlePasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5654678803279602241UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1936024687UL) { goto FAIL; }

                                ____result.AbilityNodes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7801206950056850515UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495623304033UL) { goto FAIL; }

                                ____result.StructClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8742464786864107077UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495756604531UL) { goto FAIL; }

                                ____result.EnergySystems = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7953718081818555973UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495840488548UL) { goto FAIL; }

                                ____result.EventHandlers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5150275645014106689UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495673434482UL) { goto FAIL; }

                                ____result.AbilityGraphs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 18:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8314045423756271940UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DataClassInstances().Slice(1 + 8))) { goto FAIL; }

                                ____result.DataClassInstances = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8319104478719472208UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProgressionLadders().Slice(1 + 8))) { goto FAIL; }

                                ____result.ProgressionLadders = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7020074333018813773UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MultiPlayerSystems().Slice(1 + 8))) { goto FAIL; }

                                ____result.MultiPlayerSystems = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CraftRules().Slice(1))) { goto FAIL; }

                        ____result.CraftRules = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126943989429585UL) { goto FAIL; }

                        ____result.Quests = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattlePassInstances().Slice(1))) { goto FAIL; }

                        ____result.BattlePassInstances = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32480064745989458UL) { goto FAIL; }

                        ____result.Rewards = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5220924747628504402UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32495402257509985UL) { goto FAIL; }

                                ____result.RequestHandlers = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8746391133760222029UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32489904834574675UL) { goto FAIL; }

                                ____result.MsgRelaySystems = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7308604729715750228UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32489904834574675UL) { goto FAIL; }

                                ____result.TurnGameSystems = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Base
        private static global::System.ReadOnlySpan<byte> GetSpan_Base() => new byte[1 + 4] { 164, 66, 97, 115, 101 };
        // FilePath
        private static global::System.ReadOnlySpan<byte> GetSpan_FilePath() => new byte[1 + 8] { 168, 70, 105, 108, 101, 80, 97, 116, 104 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Base());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Base, options);
            writer.WriteRaw(GetSpan_FilePath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FilePath, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1702060354UL:
                                ____result.Base = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7526747875169823046UL) { goto FAIL; }

                        ____result.FilePath = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassFieldDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Typename
        private static global::System.ReadOnlySpan<byte> GetSpan_Typename() => new byte[1 + 8] { 168, 84, 121, 112, 101, 110, 97, 109, 101 };
        // DefaultValue
        private static global::System.ReadOnlySpan<byte> GetSpan_DefaultValue() => new byte[1 + 12] { 172, 68, 101, 102, 97, 117, 108, 116, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Typename());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Typename, options);
            writer.WriteRaw(GetSpan_DefaultValue());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DefaultValue, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604897068349780UL) { goto FAIL; }

                        ____result.Typename = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DefaultValue().Slice(1))) { goto FAIL; }

                        ____result.DefaultValue = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassFieldsDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>
    {
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassInstanceDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataClassInstanceFieldDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Value());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761733974UL) { goto FAIL; }

                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventHandlerDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // EventClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_EventClassId() => new byte[1 + 12] { 172, 69, 118, 101, 110, 116, 67, 108, 97, 115, 115, 73, 100 };
        // EventClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_EventClassName() => new byte[1 + 14] { 174, 69, 118, 101, 110, 116, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // Code
        private static global::System.ReadOnlySpan<byte> GetSpan_Code() => new byte[1 + 4] { 164, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_EventClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.EventClassId, options);
            writer.WriteRaw(GetSpan_EventClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EventClassName, options);
            writer.WriteRaw(GetSpan_Code());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Code, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.EventHandlerDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701080899UL:
                                ____result.Code = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EventClassId().Slice(1))) { goto FAIL; }

                        ____result.EventClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EventClassName().Slice(1))) { goto FAIL; }

                        ____result.EventClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryDefDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Items
        private static global::System.ReadOnlySpan<byte> GetSpan_Items() => new byte[1 + 5] { 165, 73, 116, 101, 109, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Items());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO>>(formatterResolver).Serialize(ref writer, value.Items, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495756604489UL) { goto FAIL; }

                        ____result.Items = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryDefItemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Typename
        private static global::System.ReadOnlySpan<byte> GetSpan_Typename() => new byte[1 + 8] { 168, 84, 121, 112, 101, 110, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Typename());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Typename, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.InventoryDefItemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604897068349780UL) { goto FAIL; }

                        ____result.Typename = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JobHandlerDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // JobDataClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_JobDataClassId() => new byte[1 + 14] { 174, 74, 111, 98, 68, 97, 116, 97, 67, 108, 97, 115, 115, 73, 100 };
        // JobDataClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_JobDataClassName() => new byte[1 + 16] { 176, 74, 111, 98, 68, 97, 116, 97, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // Code
        private static global::System.ReadOnlySpan<byte> GetSpan_Code() => new byte[1 + 4] { 164, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_JobDataClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.JobDataClassId, options);
            writer.WriteRaw(GetSpan_JobDataClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JobDataClassName, options);
            writer.WriteRaw(GetSpan_Code());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Code, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.JobHandlerDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701080899UL:
                                ____result.Code = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_JobDataClassId().Slice(1))) { goto FAIL; }

                        ____result.JobDataClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_JobDataClassName().Slice(1))) { goto FAIL; }

                        ____result.JobDataClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ReqHandlerDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RequestClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestClassId() => new byte[1 + 14] { 174, 82, 101, 113, 117, 101, 115, 116, 67, 108, 97, 115, 115, 73, 100 };
        // ResponseClassId
        private static global::System.ReadOnlySpan<byte> GetSpan_ResponseClassId() => new byte[1 + 15] { 175, 82, 101, 115, 112, 111, 110, 115, 101, 67, 108, 97, 115, 115, 73, 100 };
        // RequestClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestClassName() => new byte[1 + 16] { 176, 82, 101, 113, 117, 101, 115, 116, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // ResponseClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_ResponseClassName() => new byte[1 + 17] { 177, 82, 101, 115, 112, 111, 110, 115, 101, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // Code
        private static global::System.ReadOnlySpan<byte> GetSpan_Code() => new byte[1 + 4] { 164, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RequestClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.RequestClassId, options);
            writer.WriteRaw(GetSpan_ResponseClassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ResponseClassId, options);
            writer.WriteRaw(GetSpan_RequestClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RequestClassName, options);
            writer.WriteRaw(GetSpan_ResponseClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ResponseClassName, options);
            writer.WriteRaw(GetSpan_Code());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Code, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.ReqHandlerDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701080899UL:
                                ____result.Code = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RequestClassId().Slice(1))) { goto FAIL; }

                        ____result.RequestClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ResponseClassId().Slice(1))) { goto FAIL; }

                        ____result.ResponseClassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RequestClassName().Slice(1))) { goto FAIL; }

                        ____result.RequestClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ResponseClassName().Slice(1))) { goto FAIL; }

                        ____result.ResponseClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserGroupClassDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };
        // StorageClasses
        private static global::System.ReadOnlySpan<byte> GetSpan_StorageClasses() => new byte[1 + 14] { 174, 83, 116, 111, 114, 97, 103, 101, 67, 108, 97, 115, 115, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
            writer.WriteRaw(GetSpan_StorageClasses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.StorageClasses, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Export.UserGroupClassDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StorageClasses().Slice(1))) { goto FAIL; }

                        ____result.StorageClasses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.HyperEdge.Shared.Protocol.Models.Mechanics
{
    public sealed class AbilityGraphDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityGraphDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AbilityNodeDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Base
        private static global::System.ReadOnlySpan<byte> GetSpan_Base() => new byte[1 + 4] { 164, 66, 97, 115, 101 };
        // Category
        private static global::System.ReadOnlySpan<byte> GetSpan_Category() => new byte[1 + 8] { 168, 67, 97, 116, 101, 103, 111, 114, 121 };
        // Code
        private static global::System.ReadOnlySpan<byte> GetSpan_Code() => new byte[1 + 4] { 164, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Base());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Base, options);
            writer.WriteRaw(GetSpan_Category());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Category, options);
            writer.WriteRaw(GetSpan_Code());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Code, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilityNodeDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1702060354UL:
                                ____result.Base = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701080899UL:
                                ____result.Code = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8751179515808735555UL) { goto FAIL; }

                        ____result.Category = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AbilitySystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Stats
        private static global::System.ReadOnlySpan<byte> GetSpan_Stats() => new byte[1 + 5] { 165, 83, 116, 97, 116, 115 };
        // Actors
        private static global::System.ReadOnlySpan<byte> GetSpan_Actors() => new byte[1 + 6] { 166, 65, 99, 116, 111, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Stats());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Serialize(ref writer, value.Stats, options);
            writer.WriteRaw(GetSpan_Actors());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.Actors, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.AbilitySystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495873782867UL) { goto FAIL; }

                        ____result.Stats = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126935333364545UL) { goto FAIL; }

                        ____result.Actors = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BattlePassDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // LadderLevelData
        private static global::System.ReadOnlySpan<byte> GetSpan_LadderLevelData() => new byte[1 + 15] { 175, 76, 97, 100, 100, 101, 114, 76, 101, 118, 101, 108, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Model, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_LadderLevelData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.LadderLevelData, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465557548877UL) { goto FAIL; }

                        ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LadderLevelData().Slice(1))) { goto FAIL; }

                        ____result.LadderLevelData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BattlePassInstanceDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // BattlePassId
        private static global::System.ReadOnlySpan<byte> GetSpan_BattlePassId() => new byte[1 + 12] { 172, 66, 97, 116, 116, 108, 101, 80, 97, 115, 115, 73, 100 };
        // BattlePassName
        private static global::System.ReadOnlySpan<byte> GetSpan_BattlePassName() => new byte[1 + 14] { 174, 66, 97, 116, 116, 108, 101, 80, 97, 115, 115, 78, 97, 109, 101 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };
        // Levels
        private static global::System.ReadOnlySpan<byte> GetSpan_Levels() => new byte[1 + 6] { 166, 76, 101, 118, 101, 108, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_BattlePassId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.BattlePassId, options);
            writer.WriteRaw(GetSpan_BattlePassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BattlePassName, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
            writer.WriteRaw(GetSpan_Levels());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>>(formatterResolver).Serialize(ref writer, value.Levels, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.BattlePassInstanceDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattlePassId().Slice(1))) { goto FAIL; }

                        ____result.BattlePassId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BattlePassName().Slice(1))) { goto FAIL; }

                        ____result.BattlePassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 126875152509254UL:
                                ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassInstanceFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 126909395920204UL:
                                ____result.Levels = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CostDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO>
    {
        // Erc721Costs
        private static global::System.ReadOnlySpan<byte> GetSpan_Erc721Costs() => new byte[1 + 11] { 171, 69, 114, 99, 55, 50, 49, 67, 111, 115, 116, 115 };
        // Erc1155Costs
        private static global::System.ReadOnlySpan<byte> GetSpan_Erc1155Costs() => new byte[1 + 12] { 172, 69, 114, 99, 49, 49, 53, 53, 67, 111, 115, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Erc721Costs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost>>(formatterResolver).Serialize(ref writer, value.Erc721Costs, options);
            writer.WriteRaw(GetSpan_Erc1155Costs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost>>(formatterResolver).Serialize(ref writer, value.Erc1155Costs, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Erc721Costs().Slice(1))) { goto FAIL; }

                        ____result.Erc721Costs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Erc1155Costs().Slice(1))) { goto FAIL; }

                        ____result.Erc1155Costs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CraftRulesDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };
        // Reward
        private static global::System.ReadOnlySpan<byte> GetSpan_Reward() => new byte[1 + 6] { 166, 82, 101, 119, 97, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Cost());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO>(formatterResolver).Serialize(ref writer, value.Cost, options);
            writer.WriteRaw(GetSpan_Reward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Serialize(ref writer, value.Reward, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.CraftRulesDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953722179UL:
                                ____result.Cost = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110442424264018UL) { goto FAIL; }

                        ____result.Reward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnergySystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Model, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.EnergySystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465557548877UL) { goto FAIL; }

                        ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EntityFieldInitDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Expr
        private static global::System.ReadOnlySpan<byte> GetSpan_Expr() => new byte[1 + 4] { 164, 69, 120, 112, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Expr());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Expr, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.EntityFieldInitDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1919973445UL:
                                ____result.Expr = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc1155CostFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost>
    {
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Cost();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc1155RewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward>
    {
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc721CostFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost>
    {
        // EntityName
        private static global::System.ReadOnlySpan<byte> GetSpan_EntityName() => new byte[1 + 10] { 170, 69, 110, 116, 105, 116, 121, 78, 97, 109, 101 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // Conditions
        private static global::System.ReadOnlySpan<byte> GetSpan_Conditions() => new byte[1 + 10] { 170, 67, 111, 110, 100, 105, 116, 105, 111, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_EntityName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EntityName, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_Conditions());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.Conditions, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Cost();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7011675210754846277UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25965UL) { goto FAIL; }

                                ____result.EntityName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8028075806769966915UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29550UL) { goto FAIL; }

                                ____result.Conditions = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Erc721RewardFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward>
    {
        // EntityName
        private static global::System.ReadOnlySpan<byte> GetSpan_EntityName() => new byte[1 + 10] { 170, 69, 110, 116, 105, 116, 121, 78, 97, 109, 101 };
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_EntityName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EntityName, options);
            writer.WriteRaw(GetSpan_ItemId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ItemId, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EntityName().Slice(1))) { goto FAIL; }

                        ____result.EntityName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266530755657UL:
                                ____result.ItemId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameEntityDescriptionDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Stats
        private static global::System.ReadOnlySpan<byte> GetSpan_Stats() => new byte[1 + 5] { 165, 83, 116, 97, 116, 115 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Stats());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.Stats, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495873782867UL) { goto FAIL; }

                        ____result.Stats = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.ContractFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GenericLadderDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ProgressionId
        private static global::System.ReadOnlySpan<byte> GetSpan_ProgressionId() => new byte[1 + 13] { 173, 80, 114, 111, 103, 114, 101, 115, 115, 105, 111, 110, 73, 100 };
        // ProgressionName
        private static global::System.ReadOnlySpan<byte> GetSpan_ProgressionName() => new byte[1 + 15] { 175, 80, 114, 111, 103, 114, 101, 115, 115, 105, 111, 110, 78, 97, 109, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // LadderType
        private static global::System.ReadOnlySpan<byte> GetSpan_LadderType() => new byte[1 + 10] { 170, 76, 97, 100, 100, 101, 114, 84, 121, 112, 101 };
        // Levels
        private static global::System.ReadOnlySpan<byte> GetSpan_Levels() => new byte[1 + 6] { 166, 76, 101, 118, 101, 108, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_ProgressionId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.ProgressionId, options);
            writer.WriteRaw(GetSpan_ProgressionName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ProgressionName, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_LadderType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LadderType, options);
            writer.WriteRaw(GetSpan_Levels());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>>(formatterResolver).Serialize(ref writer, value.Levels, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProgressionId().Slice(1))) { goto FAIL; }

                        ____result.ProgressionId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProgressionName().Slice(1))) { goto FAIL; }

                        ____result.ProgressionName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LadderType().Slice(1))) { goto FAIL; }

                        ____result.LadderType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126909395920204UL) { goto FAIL; }

                        ____result.Levels = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GenericLadderLevelDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO>
    {
        // Exp
        private static global::System.ReadOnlySpan<byte> GetSpan_Exp() => new byte[1 + 3] { 163, 69, 120, 112 };
        // Reward
        private static global::System.ReadOnlySpan<byte> GetSpan_Reward() => new byte[1 + 6] { 166, 82, 101, 119, 97, 114, 100 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // Conditions
        private static global::System.ReadOnlySpan<byte> GetSpan_Conditions() => new byte[1 + 10] { 170, 67, 111, 110, 100, 105, 116, 105, 111, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Exp());
            writer.Write(value.Exp);
            writer.WriteRaw(GetSpan_Reward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Serialize(ref writer, value.Reward, options);
            writer.WriteRaw(GetSpan_Cost());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO>(formatterResolver).Serialize(ref writer, value.Cost, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_Conditions());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.Conditions, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.GenericLadderLevelDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7370821UL) { goto FAIL; }

                        ____result.Exp = reader.ReadUInt64();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110442424264018UL) { goto FAIL; }

                        ____result.Reward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1953722179UL:
                                ____result.Cost = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Mechanics.CostDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassItemDataDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Conditions().Slice(1))) { goto FAIL; }

                        ____result.Conditions = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessageRelaySystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Standalone
        private static global::System.ReadOnlySpan<byte> GetSpan_Standalone() => new byte[1 + 10] { 170, 83, 116, 97, 110, 100, 97, 108, 111, 110, 101 };
        // MessageTypes
        private static global::System.ReadOnlySpan<byte> GetSpan_MessageTypes() => new byte[1 + 12] { 172, 77, 101, 115, 115, 97, 103, 101, 84, 121, 112, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Standalone());
            writer.Write(value.Standalone);
            writer.WriteRaw(GetSpan_MessageTypes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO>>(formatterResolver).Serialize(ref writer, value.MessageTypes, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelaySystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Standalone().Slice(1))) { goto FAIL; }

                        ____result.Standalone = reader.ReadBoolean();
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MessageTypes().Slice(1))) { goto FAIL; }

                        ____result.MessageTypes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessageRelayTypeDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RequestClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_RequestClassName() => new byte[1 + 16] { 176, 82, 101, 113, 117, 101, 115, 116, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // ResponseClassName
        private static global::System.ReadOnlySpan<byte> GetSpan_ResponseClassName() => new byte[1 + 17] { 177, 82, 101, 115, 112, 111, 110, 115, 101, 67, 108, 97, 115, 115, 78, 97, 109, 101 };
        // Relay
        private static global::System.ReadOnlySpan<byte> GetSpan_Relay() => new byte[1 + 5] { 165, 82, 101, 108, 97, 121 };
        // Code
        private static global::System.ReadOnlySpan<byte> GetSpan_Code() => new byte[1 + 4] { 164, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RequestClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RequestClassName, options);
            writer.WriteRaw(GetSpan_ResponseClassName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ResponseClassName, options);
            writer.WriteRaw(GetSpan_Relay());
            writer.Write(value.Relay);
            writer.WriteRaw(GetSpan_Code());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Code, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.MessageRelayTypeDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701080899UL:
                                ____result.Code = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RequestClassName().Slice(1))) { goto FAIL; }

                        ____result.RequestClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ResponseClassName().Slice(1))) { goto FAIL; }

                        ____result.ResponseClassName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521325536594UL) { goto FAIL; }

                        ____result.Relay = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MultiPlayerSystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // InputKeys
        private static global::System.ReadOnlySpan<byte> GetSpan_InputKeys() => new byte[1 + 9] { 169, 73, 110, 112, 117, 116, 75, 101, 121, 115 };
        // NetEntities
        private static global::System.ReadOnlySpan<byte> GetSpan_NetEntities() => new byte[1 + 11] { 171, 78, 101, 116, 69, 110, 116, 105, 116, 105, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_InputKeys());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.InputKeys, options);
            writer.WriteRaw(GetSpan_NetEntities());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.NetEntities, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.MultiPlayerSystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_InputKeys().Slice(1))) { goto FAIL; }

                        ____result.InputKeys = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_NetEntities().Slice(1))) { goto FAIL; }

                        ____result.NetEntities = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NetEntityDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };
        // SyncFields
        private static global::System.ReadOnlySpan<byte> GetSpan_SyncFields() => new byte[1 + 10] { 170, 83, 121, 110, 99, 70, 105, 101, 108, 100, 115 };
        // Fields
        private static global::System.ReadOnlySpan<byte> GetSpan_Fields() => new byte[1 + 6] { 166, 70, 105, 101, 108, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Model, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Data, options);
            writer.WriteRaw(GetSpan_SyncFields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>>(formatterResolver).Serialize(ref writer, value.SyncFields, options);
            writer.WriteRaw(GetSpan_Fields());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>>(formatterResolver).Serialize(ref writer, value.Fields, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465557548877UL) { goto FAIL; }

                        ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SyncFields().Slice(1))) { goto FAIL; }

                        ____result.SyncFields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126875152509254UL) { goto FAIL; }

                        ____result.Fields = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NetEntityFieldDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Typename
        private static global::System.ReadOnlySpan<byte> GetSpan_Typename() => new byte[1 + 8] { 168, 84, 121, 112, 101, 110, 97, 109, 101 };
        // DefaultValue
        private static global::System.ReadOnlySpan<byte> GetSpan_DefaultValue() => new byte[1 + 12] { 172, 68, 101, 102, 97, 117, 108, 116, 86, 97, 108, 117, 101 };
        // InitFrom
        private static global::System.ReadOnlySpan<byte> GetSpan_InitFrom() => new byte[1 + 8] { 168, 73, 110, 105, 116, 70, 114, 111, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Typename());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Typename, options);
            writer.WriteRaw(GetSpan_DefaultValue());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DefaultValue, options);
            writer.WriteRaw(GetSpan_InitFrom());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.InitFrom, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.NetEntityFieldDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897068349780UL:
                                ____result.Typename = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7885647119475371593UL:
                                ____result.InitFrom = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DefaultValue().Slice(1))) { goto FAIL; }

                        ____result.DefaultValue = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ProgressionSystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // EntityName
        private static global::System.ReadOnlySpan<byte> GetSpan_EntityName() => new byte[1 + 10] { 170, 69, 110, 116, 105, 116, 121, 78, 97, 109, 101 };
        // IsExperienceBased
        private static global::System.ReadOnlySpan<byte> GetSpan_IsExperienceBased() => new byte[1 + 17] { 177, 73, 115, 69, 120, 112, 101, 114, 105, 101, 110, 99, 101, 66, 97, 115, 101, 100 };
        // LevelField
        private static global::System.ReadOnlySpan<byte> GetSpan_LevelField() => new byte[1 + 10] { 170, 76, 101, 118, 101, 108, 70, 105, 101, 108, 100 };
        // ExperienceField
        private static global::System.ReadOnlySpan<byte> GetSpan_ExperienceField() => new byte[1 + 15] { 175, 69, 120, 112, 101, 114, 105, 101, 110, 99, 101, 70, 105, 101, 108, 100 };
        // LadderLevelData
        private static global::System.ReadOnlySpan<byte> GetSpan_LadderLevelData() => new byte[1 + 15] { 175, 76, 97, 100, 100, 101, 114, 76, 101, 118, 101, 108, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_EntityName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EntityName, options);
            writer.WriteRaw(GetSpan_IsExperienceBased());
            writer.Write(value.IsExperienceBased);
            writer.WriteRaw(GetSpan_LevelField());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LevelField, options);
            writer.WriteRaw(GetSpan_ExperienceField());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ExperienceField, options);
            writer.WriteRaw(GetSpan_LadderLevelData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.LadderLevelData, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.ProgressionSystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7011675210754846277UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25965UL) { goto FAIL; }

                                ____result.EntityName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7307449301758010700UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25708UL) { goto FAIL; }

                                ____result.LevelField = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsExperienceBased().Slice(1))) { goto FAIL; }

                        ____result.IsExperienceBased = reader.ReadBoolean();
                        continue;
                    case 15:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7954880256868907077UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28266680484783459UL) { goto FAIL; }

                                ____result.ExperienceField = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7299334875862294860UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 27431033849537910UL) { goto FAIL; }

                                ____result.LadderLevelData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AcceptConditions
        private static global::System.ReadOnlySpan<byte> GetSpan_AcceptConditions() => new byte[1 + 16] { 176, 65, 99, 99, 101, 112, 116, 67, 111, 110, 100, 105, 116, 105, 111, 110, 115 };
        // FinishConditions
        private static global::System.ReadOnlySpan<byte> GetSpan_FinishConditions() => new byte[1 + 16] { 176, 70, 105, 110, 105, 115, 104, 67, 111, 110, 100, 105, 116, 105, 111, 110, 115 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AcceptConditions());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.AcceptConditions, options);
            writer.WriteRaw(GetSpan_FinishConditions());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.FinishConditions, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.Model, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.QuestDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 16:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8017379787735786305UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8317708060515198062UL) { goto FAIL; }

                                ____result.AcceptConditions = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8017366606548986182UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8317708060515198062UL) { goto FAIL; }

                                ____result.FinishConditions = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465557548877UL) { goto FAIL; }

                        ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.DataClassContractDataDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RewardDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO>
    {
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Erc721Rewards
        private static global::System.ReadOnlySpan<byte> GetSpan_Erc721Rewards() => new byte[1 + 13] { 173, 69, 114, 99, 55, 50, 49, 82, 101, 119, 97, 114, 100, 115 };
        // Erc1155Rewards
        private static global::System.ReadOnlySpan<byte> GetSpan_Erc1155Rewards() => new byte[1 + 14] { 174, 69, 114, 99, 49, 49, 53, 53, 82, 101, 119, 97, 114, 100, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Erc721Rewards());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward>>(formatterResolver).Serialize(ref writer, value.Erc721Rewards, options);
            writer.WriteRaw(GetSpan_Erc1155Rewards());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward>>(formatterResolver).Serialize(ref writer, value.Erc1155Rewards, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.RewardDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Erc721Rewards().Slice(1))) { goto FAIL; }

                        ____result.Erc721Rewards = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc721Reward>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Erc1155Rewards().Slice(1))) { goto FAIL; }

                        ____result.Erc1155Rewards = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.Erc1155Reward>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TournamentDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // ScoreFieldName
        private static global::System.ReadOnlySpan<byte> GetSpan_ScoreFieldName() => new byte[1 + 14] { 174, 83, 99, 111, 114, 101, 70, 105, 101, 108, 100, 78, 97, 109, 101 };
        // Model
        private static global::System.ReadOnlySpan<byte> GetSpan_Model() => new byte[1 + 5] { 165, 77, 111, 100, 101, 108 };
        // Data
        private static global::System.ReadOnlySpan<byte> GetSpan_Data() => new byte[1 + 4] { 164, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_ScoreFieldName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ScoreFieldName, options);
            writer.WriteRaw(GetSpan_Model());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Model, options);
            writer.WriteRaw(GetSpan_Data());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.TournamentDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1635017028UL:
                                ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ScoreFieldName().Slice(1))) { goto FAIL; }

                        ____result.ScoreFieldName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465557548877UL) { goto FAIL; }

                        ____result.Model = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::HyperEdge.Shared.Protocol.Models.Export.DataClassFieldsDTO>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TurnGameSystemDTOFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // GameEntitySlotDataTypes
        private static global::System.ReadOnlySpan<byte> GetSpan_GameEntitySlotDataTypes() => new byte[1 + 23] { 183, 71, 97, 109, 101, 69, 110, 116, 105, 116, 121, 83, 108, 111, 116, 68, 97, 116, 97, 84, 121, 112, 101, 115 };
        // GameEntityDataTypes
        private static global::System.ReadOnlySpan<byte> GetSpan_GameEntityDataTypes() => new byte[1 + 19] { 179, 71, 97, 109, 101, 69, 110, 116, 105, 116, 121, 68, 97, 116, 97, 84, 121, 112, 101, 115 };
        // GameEntities
        private static global::System.ReadOnlySpan<byte> GetSpan_GameEntities() => new byte[1 + 12] { 172, 71, 97, 109, 101, 69, 110, 116, 105, 116, 105, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_GameEntitySlotDataTypes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.GameEntitySlotDataTypes, options);
            writer.WriteRaw(GetSpan_GameEntityDataTypes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Serialize(ref writer, value.GameEntityDataTypes, options);
            writer.WriteRaw(GetSpan_GameEntities());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO>>(formatterResolver).Serialize(ref writer, value.GameEntities, options);
        }

        public global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::HyperEdge.Shared.Protocol.Models.Mechanics.TurnGameSystemDTO();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Ulid>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 23:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_GameEntitySlotDataTypes().Slice(1))) { goto FAIL; }

                        ____result.GameEntitySlotDataTypes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_GameEntityDataTypes().Slice(1))) { goto FAIL; }

                        ____result.GameEntityDataTypes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Export.DataClassDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_GameEntities().Slice(1))) { goto FAIL; }

                        ____result.GameEntities = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::HyperEdge.Shared.Protocol.Models.Mechanics.GameEntityDescriptionDTO>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

